TestCase subclass: #AdventOfCode2021Tests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'AdventOfCode2021'!!AdventOfCode2021Tests methodsFor: 'solving' stamp: 'BSTJ 12/2/2021 03:51'!solveDay01Part01With: aString	| measures increases |	increases := 0.	measures := OrderedCollection new.	aString linesDo: [ :each | measures add: (DepthMeasurement fromString: each)].		measures currentAndNextDo: [:current :next | (current depth < next depth) ifTrue: [increases := increases + 1]].		^increases	! !!AdventOfCode2021Tests methodsFor: 'solving' stamp: 'BSTJ 12/2/2021 14:44'!solveDay01Part02With: aString	| measures increases windows wMeasures |	increases := 0.	measures := OrderedCollection new.	wMeasures := OrderedCollection new.	aString linesDo: [ :each | measures add: (DepthMeasurement fromString: each)].		DepthMeasurement setSlidingWindowsForMeasurements: measures.	windows :=  DepthMeasurement allWindowsFromMeasurements: measures.	windows do: [:win | | qualifiers total |							qualifiers := measures select: [:each | each includesWindow: win].						total := (qualifiers collect: [:qua | qua depth]) sum.						wMeasures add: total].						wMeasures currentAndNextDo: [:current :next | (current < next) ifTrue: [increases := increases + 1]].	^increases! !!AdventOfCode2021Tests methodsFor: 'solving' stamp: 'BSTJ 12/2/2021 02:45'!solveDay02Part01With: aString	| commands sub |	commands := OrderedCollection new.	aString linesDo: [ :each | commands add: each ].		sub := BasicSubmarine new.	commands do: [:com | sub executeCommand: com].	^sub depth * sub horizontalPosition ! !!AdventOfCode2021Tests methodsFor: 'solving' stamp: 'BSTJ 12/2/2021 02:51'!solveDay02Part02With: aString	| commands sub |	commands := OrderedCollection new.	aString linesDo: [ :each | commands add: each ].		sub := Submarine new.	commands do: [:com | sub executeCommand: com].	^sub depth * sub horizontalPosition ! !!AdventOfCode2021Tests methodsFor: 'solving' stamp: 'BSTJ 12/3/2021 00:41'!solveDay03Part01With: aString	| diagReport |		diagReport := DiagnosticReport fromString: aString.	^diagReport powerConsumption 		! !!AdventOfCode2021Tests methodsFor: 'solving' stamp: 'BSTJ 12/3/2021 08:04'!solveDay03Part02With: aString	| diagReport |		diagReport := DiagnosticReport fromString: aString.	^diagReport lifeSupportRating  		! !!AdventOfCode2021Tests methodsFor: 'solving' stamp: 'BSTJ 12/5/2021 23:59'!solveDay04Part01With: aString	| b winningCombination unmarkedSum lastNumberDrawn |		b := Bingo fromString: aString.		winningCombination := b findWinningCardAndDrawnNumber.		unmarkedSum := winningCombination first allUnmarked sum.	lastNumberDrawn := winningCombination last.		^ unmarkedSum * lastNumberDrawn		! !!AdventOfCode2021Tests methodsFor: 'solving' stamp: 'BSTJ 12/6/2021 00:20'!solveDay04Part02With: aString	| b winningCombination unmarkedSum lastNumberDrawn |		b := Bingo fromString: aString.		winningCombination := b findLastWinningCardAndDrawnNumber.		unmarkedSum := winningCombination first allUnmarked sum.	lastNumberDrawn := winningCombination last.		^ unmarkedSum * lastNumberDrawn		! !!AdventOfCode2021Tests methodsFor: 'solving' stamp: 'BSTJ 12/6/2021 02:04'!solveDay05Part01With: aString	| htg |		htg := HydrothermalGrid fromString: aString.	htg calculateSimpleOverlaps.	^htg getNumberOfOverlapsGreaterThan: 1			! !!AdventOfCode2021Tests methodsFor: 'solving' stamp: 'BSTJ 12/6/2021 02:54'!solveDay05Part02With: aString	| htg |		htg := HydrothermalGrid fromString: aString.	htg calculateOverlaps.	^htg getNumberOfOverlapsGreaterThan: 1 			! !!AdventOfCode2021Tests methodsFor: 'solving' stamp: 'BSTJ 12/7/2021 21:28'!solveDay06Part01With: aString	| population dayNumber babies |			dayNumber := 0.	population := ((aString subStrings: (Array with: $,)) collect: [:num | Lanternfish withTimer: num asInteger ]) asOrderedCollection.	1 to: 80 do: [:day | babies := OrderedCollection new.						population do: [:fish |	fish isAboutToGiveBirth ifTrue: [babies add: fish deliver].												fish decrementTimer]. 						population addAll: babies.																									].					^population size		! !!AdventOfCode2021Tests methodsFor: 'solving' stamp: 'BSTJ 12/8/2021 00:10'!solveDay06Part02With: aString	| oldCycle pop |		oldCycle := Dictionary new.	0 to: 8 do: [:dayIndex | oldCycle at: dayIndex put: 0 ].		pop := (aString subStrings: (Array with: $,)) collect: [:num | num asInteger ].	0 to: 8 do: [:dayIndex |	| total | 							total := pop count: [:each | each = dayIndex ].							oldCycle at: dayIndex put: total].	1 to: 256 do: [:days |	| newCycle babies  |							babies := oldCycle at: 0.							newCycle := Dictionary new.							newCycle at: 8 put: babies.							newCycle at: 7 put: (oldCycle at: 8) .							newCycle at: 6 put: ((oldCycle at: 7) + (oldCycle at: 0)).							newCycle at: 5 put: (oldCycle at: 6) .							newCycle at: 4 put: (oldCycle at: 5) .							newCycle at: 3 put: (oldCycle at: 4) .							newCycle at: 2 put: (oldCycle at: 3) .								newCycle at: 1 put: (oldCycle at: 2) .							newCycle at: 0 put: (oldCycle at: 1) .									oldCycle := newCycle copy.													].	^oldCycle values sum					! !!AdventOfCode2021Tests methodsFor: 'tests' stamp: 'BSTJ 12/8/2021 00:12'!setUp	self timeout: 60! !!AdventOfCode2021Tests methodsFor: 'tests' stamp: 'BSTJ 12/2/2021 05:57'!testDay01	self assert: (self solveDay01Part01With: self day01Example01Data) equals: 7.	self assert: (self solveDay01Part01With: self day01Puzzle01Data) equals: 1624. 		self assert: (self solveDay01Part02With: self day01Example02Data) equals: 5.	self assert: (self solveDay01Part02With: self day01Puzzle02Data) equals: 1653.! !!AdventOfCode2021Tests methodsFor: 'tests' stamp: 'BSTJ 12/2/2021 02:55'!testDay02	self assert: (self solveDay02Part01With: self day02Example01Data) equals: 150.	self assert: (self solveDay02Part01With: self day02Puzzle01Data) equals: 1804520.		self assert: (self solveDay02Part02With: self day02Example01Data) equals: 900.	self assert: (self solveDay02Part02With: self day02Puzzle02Data) equals: 1971095320.! !!AdventOfCode2021Tests methodsFor: 'tests' stamp: 'BSTJ 12/8/2021 00:13'!testDay03	self assert: (self solveDay03Part01With: self day03Example01Data) equals: 198.	self assert: (self solveDay03Part01With: self day03Puzzle01Data) equals: 3923414.		self assert: (self solveDay03Part02With: self day03Example01Data) equals: 230.	self assert: (self solveDay03Part02With: self day03Puzzle02Data) equals: 5852595.	! !!AdventOfCode2021Tests methodsFor: 'tests' stamp: 'BSTJ 12/6/2021 00:21'!testDay04	self assert: (self solveDay04Part01With: self day04Example01Data) equals: 4512.	self assert: (self solveDay04Part01With: self day04Puzzle01Data) equals: 54275.		self assert: (self solveDay04Part02With: self day04Example01Data) equals: 1924.	self assert: (self solveDay04Part02With: self day04Puzzle01Data) equals: 13158.! !!AdventOfCode2021Tests methodsFor: 'tests' stamp: 'BSTJ 12/8/2021 00:13'!testDay05	self assert: (self solveDay05Part01With: self day05Example01Data) equals: 5.	self assert: (self solveDay05Part01With: self day05Puzzle01Data) equals: 5124.		self assert: (self solveDay05Part02With: self day05Example02Data) equals: 12.	self assert: (self solveDay05Part02With: self day05Puzzle01Data) equals: 19771.	! !!AdventOfCode2021Tests methodsFor: 'tests' stamp: 'BSTJ 12/8/2021 00:12'!testDay06	self assert: (self solveDay06Part01With: self day06Example01Data) equals: 5934.	self assert: (self solveDay06Part01With: self day06Puzzle01Data) equals: 391888.		self assert: (self solveDay06Part02With: self day06Example01Data) equals: 26984457539.	self assert: (self solveDay06Part02With: self day06Puzzle01Data) equals: 1754597645339.	! !!AdventOfCode2021Tests methodsFor: 'input data' stamp: 'BSTJ 12/1/2021 04:42'!day01Example01Data	^'199200208210200207240269260263'! !!AdventOfCode2021Tests methodsFor: 'input data' stamp: 'BSTJ 12/1/2021 04:56'!day01Example02Data	^'199  A      200  A B    208  A B C  210    B C D200  E   C D207  E F   D240  E F G  269    F G H260      G H263        H'! !!AdventOfCode2021Tests methodsFor: 'input data' stamp: 'BSTJ 12/1/2021 04:43'!day01Puzzle01Data^'19519720120420321621321521618518819020521823724324827828929230431331431732932832932832933033132933333733834535235435535936036336536437037136738740340740941141642543544444544646044945445845946346444544744845045246346447545946046547748448548649850050150251651553153456057658358658757558858759159559960760860961061661260160362162462363063963362862963063163264665065465065465966066366967067370270971573973475075676277577378478578478979078578479881481581681781882682784183583683984184383583981983883783184784584784885385488388488388488588788888989690292092292392492893096295898597998097998610191016101710221032103510371040103810451056106510901104108410821084109711151118112811231133114311441133113411351136114411351136114511571168117211731176119412131191119211941197120011931196119812011194119612251224123012321239124012431239121712181220122412321225122312241227121912201219122712371250125912631264127412751280130012881291129312781279128012771293129713091308131513391345134313411344134813601366136913861389141914181419141414201447145314601454147714851492150015011494148414871496149714991503150515071515152215251527153915411569157115621568155615631542154715481542155115491559156215641560156215631564156315641565159516071613161616181617161916211622162416371631162716301635163916751677168116831685168416891700170116991702170417181713168916901689166716681697170016941697171517191725172617131714172017231725172817311749174617481766176717711770177917831801179017731775177717911794179518041787179217931798181618181820181218161817181818201833185018471851186618681871187518831884188618951899190119021940194419661969197919741977198219832012202720312044204020582062206020612063206720682091209320692083208420832085208320872095208820902093209720962097209920982108211221152116211721212123215821402143213421592161216221772179218621902189217121742178217421762178216621682169217021772203221222132214222322272228223722322239226922682271228322902294229623012303230723042315231723252326232823292351236123302342234323462354235723752364236523612365236423672368237023662367237123762382238323942398238923932400240224132429243124472449248124872488250724962495251125262544254525342549255025402542255525582546255925772578258225852605262026252630263326392647265426582662266126822708274627332738275627632766276927702773277027812782278427852783278127782804279327952796279727982797279827972798279928072808281428162817279527982799280128072808280728262817281828202824284128402846284728362839284228452849285328572856287528932913292129272911291229142919292329212934293229352941295129522959296529702975299129932994300030023004301930243029303030313032303130343039304230523053305530563089310731123113311131123113311731163108311231103111311731203112311331183106310731053108310731083118312731253134313731383144315931723178318531913197319331923203320932163213321532263228322532273214321732263264326532703273327132653262328432873289329733153324327932853289329832993313331433153353334033383339334033423356335533563362337733853391339434013411340934253426342734363442344334473448344934503456346334713489350234853490346934713474348134883495349034973518353035313533353535403552355535583566357135873604360536083632363836503643363436353666366736703668367436783688368736853686370437093710371737193730373537333756375737833784378637883789379437993803382438273793379437963786378737883791378938043805382338333816381438153821382038233824382638253836383938433844384538463867388738913898391539173915391939263924392639283938394739523953396039613970397139774002400840344035404440544078407940814086408340864088408140914094409040914100411541174120410841504151413241344138414541534155415641354146412841554170417241714183418441914214422142284238424042414210421442174221421042294235424342474263426442634277428142854288430443104312432343264331432943514348435043544357435943604368438043644348435243534368437943834386437243734380437943814382441244194402440344044423441544164418441944254437443944384439445144594460446144624465447945084504450645084516451044984511450645234528454245634574458845874588459045914592459445994592459446154613461546164625461946204623462846294630463346394638464046554656465746794681468046814696469247004704470647154721472247344712471647154721472247244736474147554756475447474759476847724778478248124806480848094806481148064807481848264827482848304836483748554856486348514852485348544860486148624865486848544857485648754876488248834884488348964901491249224930491249204921493049354934493649394941495049534958497249754976499449954998500150085013501450165026502550315039505250535059506450655082508350845085509050925099513651455167516051335135511351175140512951315124512351245137514851535157517151795204520652105212521552255229523252295220522452355250524952575258526052655289528852905292529352625264526552635265527052795284528552915290529552995318533153455347534153475348534953555345535053575358536453655377537854055408540754175425542854325431543854395445545154535446544954515461546754755497551355145535553655375565557555795580560056095592561056095614562256215622564756495660566156685665566656845687568856925691569756985678568656875686568756885681569056915696570157025693568656905693569756945699570057135700570957115719572057215723572657275728572357285735574157285733574157475751574757565757575857535752575357565754575557665768578057785777577857845788579058015802581658325833582158245837583058045830583158405850586258635864586958625861586258665865586659065907590859095918591759215920592159195938593959155936593859435961597259825987599159946010601360176018602160176022602360136014602760566061606760566057607160746077606860926098610661186133614061416179618561866201620362046214621562216230624062416252625362686270627762806282628162826293626362486249625062706280627662786291629262946295630263116341633563366337633663376339634263476341634263436353635563796366637063716378637963846404640264156414641764166417641064286443644564506448645664776479648664936495649665226523652465256526652765296537653265506565656665716598661466206621662266206586659265966624661966186610661166186619662266306627663366116614661766126622662366266645664666456658666166646666667366836686668866856718671967206721671867206749675567526755675667686771677367766816683068316843684468456851687368756876687868796880687368746857685668576856685868556856685768556859686068626864687468766862686568746893689969006903690869096937693969426954695869626972696869796983698269836989698869996992699670006998697469776996699769986999700569906992699370167023700070027022703570427052706570697076706670807084708370827083708470897094709371027105710671077110711171127119712071077106710570947105710671077109711671177121714371457161717071717178714971457146714771487149716271637168717571767189718771727183719071917201720972117212725472557261726972787298730773047305732773297339733573317335733673387351734973557360737073717402741574147413742674297430743274337419742074217424742774327424743374407441746474687469748274877492749474957498750475057506751375177520752675437531753775387543753475397544755175557554755975677572758076007602759275977601760276047607763076337640764176427631764076427626760976157623762576027600760476067617762076217632762876507652765476577666766776787679767476787679767876797681767576737664768676847680768176827681768776937690769477107711771077127720771077117718773077327734773577367737775677667768776977767788779277937807780878267831783878397872787578777879789078957893789679037908790479177918793079617957796079507968796979737996799979938001800580068045805880648063807780808081809881028109811081218123812281298132815481598171819081928199820282408241824382618262825682608257825882708274827682608257825882618297830583088309831083358338835283628363834883468349834383338335833683378346833883668391838884028413843984408443844484518459846084728468846984748478848785118530853185378536853785448549856285638562'! !!AdventOfCode2021Tests methodsFor: 'input data' stamp: 'BSTJ 12/2/2021 05:22'!day01Puzzle02Data	^'19519720120420321621321521618518819020521823724324827828929230431331431732932832932832933033132933333733834535235435535936036336536437037136738740340740941141642543544444544646044945445845946346444544744845045246346447545946046547748448548649850050150251651553153456057658358658757558858759159559960760860961061661260160362162462363063963362862963063163264665065465065465966066366967067370270971573973475075676277577378478578478979078578479881481581681781882682784183583683984184383583981983883783184784584784885385488388488388488588788888989690292092292392492893096295898597998097998610191016101710221032103510371040103810451056106510901104108410821084109711151118112811231133114311441133113411351136114411351136114511571168117211731176119412131191119211941197120011931196119812011194119612251224123012321239124012431239121712181220122412321225122312241227121912201219122712371250125912631264127412751280130012881291129312781279128012771293129713091308131513391345134313411344134813601366136913861389141914181419141414201447145314601454147714851492150015011494148414871496149714991503150515071515152215251527153915411569157115621568155615631542154715481542155115491559156215641560156215631564156315641565159516071613161616181617161916211622162416371631162716301635163916751677168116831685168416891700170116991702170417181713168916901689166716681697170016941697171517191725172617131714172017231725172817311749174617481766176717711770177917831801179017731775177717911794179518041787179217931798181618181820181218161817181818201833185018471851186618681871187518831884188618951899190119021940194419661969197919741977198219832012202720312044204020582062206020612063206720682091209320692083208420832085208320872095208820902093209720962097209920982108211221152116211721212123215821402143213421592161216221772179218621902189217121742178217421762178216621682169217021772203221222132214222322272228223722322239226922682271228322902294229623012303230723042315231723252326232823292351236123302342234323462354235723752364236523612365236423672368237023662367237123762382238323942398238923932400240224132429243124472449248124872488250724962495251125262544254525342549255025402542255525582546255925772578258225852605262026252630263326392647265426582662266126822708274627332738275627632766276927702773277027812782278427852783278127782804279327952796279727982797279827972798279928072808281428162817279527982799280128072808280728262817281828202824284128402846284728362839284228452849285328572856287528932913292129272911291229142919292329212934293229352941295129522959296529702975299129932994300030023004301930243029303030313032303130343039304230523053305530563089310731123113311131123113311731163108311231103111311731203112311331183106310731053108310731083118312731253134313731383144315931723178318531913197319331923203320932163213321532263228322532273214321732263264326532703273327132653262328432873289329733153324327932853289329832993313331433153353334033383339334033423356335533563362337733853391339434013411340934253426342734363442344334473448344934503456346334713489350234853490346934713474348134883495349034973518353035313533353535403552355535583566357135873604360536083632363836503643363436353666366736703668367436783688368736853686370437093710371737193730373537333756375737833784378637883789379437993803382438273793379437963786378737883791378938043805382338333816381438153821382038233824382638253836383938433844384538463867388738913898391539173915391939263924392639283938394739523953396039613970397139774002400840344035404440544078407940814086408340864088408140914094409040914100411541174120410841504151413241344138414541534155415641354146412841554170417241714183418441914214422142284238424042414210421442174221421042294235424342474263426442634277428142854288430443104312432343264331432943514348435043544357435943604368438043644348435243534368437943834386437243734380437943814382441244194402440344044423441544164418441944254437443944384439445144594460446144624465447945084504450645084516451044984511450645234528454245634574458845874588459045914592459445994592459446154613461546164625461946204623462846294630463346394638464046554656465746794681468046814696469247004704470647154721472247344712471647154721472247244736474147554756475447474759476847724778478248124806480848094806481148064807481848264827482848304836483748554856486348514852485348544860486148624865486848544857485648754876488248834884488348964901491249224930491249204921493049354934493649394941495049534958497249754976499449954998500150085013501450165026502550315039505250535059506450655082508350845085509050925099513651455167516051335135511351175140512951315124512351245137514851535157517151795204520652105212521552255229523252295220522452355250524952575258526052655289528852905292529352625264526552635265527052795284528552915290529552995318533153455347534153475348534953555345535053575358536453655377537854055408540754175425542854325431543854395445545154535446544954515461546754755497551355145535553655375565557555795580560056095592561056095614562256215622564756495660566156685665566656845687568856925691569756985678568656875686568756885681569056915696570157025693568656905693569756945699570057135700570957115719572057215723572657275728572357285735574157285733574157475751574757565757575857535752575357565754575557665768578057785777577857845788579058015802581658325833582158245837583058045830583158405850586258635864586958625861586258665865586659065907590859095918591759215920592159195938593959155936593859435961597259825987599159946010601360176018602160176022602360136014602760566061606760566057607160746077606860926098610661186133614061416179618561866201620362046214621562216230624062416252625362686270627762806282628162826293626362486249625062706280627662786291629262946295630263116341633563366337633663376339634263476341634263436353635563796366637063716378637963846404640264156414641764166417641064286443644564506448645664776479648664936495649665226523652465256526652765296537653265506565656665716598661466206621662266206586659265966624661966186610661166186619662266306627663366116614661766126622662366266645664666456658666166646666667366836686668866856718671967206721671867206749675567526755675667686771677367766816683068316843684468456851687368756876687868796880687368746857685668576856685868556856685768556859686068626864687468766862686568746893689969006903690869096937693969426954695869626972696869796983698269836989698869996992699670006998697469776996699769986999700569906992699370167023700070027022703570427052706570697076706670807084708370827083708470897094709371027105710671077110711171127119712071077106710570947105710671077109711671177121714371457161717071717178714971457146714771487149716271637168717571767189718771727183719071917201720972117212725472557261726972787298730773047305732773297339733573317335733673387351734973557360737073717402741574147413742674297430743274337419742074217424742774327424743374407441746474687469748274877492749474957498750475057506751375177520752675437531753775387543753475397544755175557554755975677572758076007602759275977601760276047607763076337640764176427631764076427626760976157623762576027600760476067617762076217632762876507652765476577666766776787679767476787679767876797681767576737664768676847680768176827681768776937690769477107711771077127720771077117718773077327734773577367737775677667768776977767788779277937807780878267831783878397872787578777879789078957893789679037908790479177918793079617957796079507968796979737996799979938001800580068045805880648063807780808081809881028109811081218123812281298132815481598171819081928199820282408241824382618262825682608257825882708274827682608257825882618297830583088309831083358338835283628363834883468349834383338335833683378346833883668391838884028413843984408443844484518459846084728468846984748478848785118530853185378536853785448549856285638562'! !!AdventOfCode2021Tests methodsFor: 'input data' stamp: 'BSTJ 12/2/2021 02:02'!day02Example01Data	^'forward 5down 5forward 8up 3down 8forward 2'! !!AdventOfCode2021Tests methodsFor: 'input data' stamp: 'BSTJ 12/2/2021 02:44'!day02Example02Data	^'forward 5down 5forward 8up 3down 8forward 2'! !!AdventOfCode2021Tests methodsFor: 'input data' stamp: 'BSTJ 12/2/2021 02:09'!day02Puzzle01Data^'forward 2down 4down 1down 4forward 3down 6down 5forward 3forward 8down 2down 3up 8down 5up 7down 7forward 5up 2down 6forward 7forward 1forward 2forward 7up 7forward 6down 3down 1up 9down 2up 1down 1up 6forward 6down 7forward 6up 1down 6forward 2up 7forward 4forward 8forward 7down 7forward 8down 1down 6down 7forward 4down 3up 7down 5down 9up 8up 4down 2down 3up 7forward 6forward 6forward 8forward 2up 5down 8down 3down 3down 4down 9down 6up 6forward 4down 6forward 3forward 3down 4down 8down 2up 5up 5forward 3forward 5down 7forward 6forward 9forward 8forward 2down 3down 3down 7down 1down 1down 1down 2down 8down 6forward 6up 1up 6down 7down 1forward 1up 2up 8up 8forward 2down 1down 8down 7down 1forward 1down 9up 3down 3forward 2down 3up 6down 2forward 7down 9down 6down 1forward 6down 4down 1down 3forward 3down 5forward 9down 5down 7up 8forward 8forward 8down 6down 1forward 8down 4up 4up 4up 2forward 2forward 2down 1up 8down 1down 7forward 5down 9down 2up 3down 1down 5forward 6down 7up 3forward 7down 4down 3forward 4up 8down 4forward 4forward 2forward 5down 5up 2forward 4down 4forward 6down 4forward 1down 5forward 2forward 2down 8forward 4forward 7down 3up 3forward 2forward 6forward 8down 2forward 4down 2up 9down 9down 2forward 5up 4forward 2down 2down 3forward 1down 2forward 8forward 8down 4forward 6down 3down 3down 5forward 8forward 4forward 1up 4up 2forward 8down 8forward 2forward 6up 1up 5forward 2forward 4forward 7forward 8forward 2down 3down 1down 9down 6up 5up 6forward 6down 3down 2down 1forward 5forward 2forward 7down 8down 7forward 7up 8forward 7down 1up 4forward 9forward 4forward 1down 3down 9down 7forward 1down 3forward 3down 4down 7forward 4up 6down 8up 1forward 6forward 1down 7down 8up 9up 4down 3down 7forward 8up 2up 6forward 8down 1up 4up 4forward 8down 2down 4down 3forward 5down 8forward 1down 2forward 9forward 3up 6down 6forward 6forward 4down 6down 3down 3forward 6down 5up 4down 9down 3down 6up 9forward 6down 2forward 7up 8down 3down 7down 9forward 6down 1forward 2down 1down 3down 3forward 5forward 2up 5forward 4up 7down 9forward 7forward 3down 6forward 1down 1up 8down 9up 3down 7up 9forward 7down 7down 9forward 9forward 7up 9down 7down 2down 7up 2down 3down 9down 6forward 7forward 8forward 8forward 6forward 9forward 4down 4down 5down 7forward 6forward 2forward 4forward 9down 4forward 6down 7up 1down 7forward 9forward 7down 4down 3up 6forward 8forward 7down 8forward 4up 6up 4forward 9forward 4forward 4forward 7down 1up 6forward 8forward 3up 6forward 4down 1up 2forward 1down 5forward 5up 4down 6down 3up 8forward 9down 2forward 4forward 8down 9forward 5forward 2down 9down 8forward 8down 7up 6forward 1up 9up 3forward 9down 6forward 9down 3down 3forward 7forward 5down 8down 9down 3down 6up 8down 9forward 8down 7down 5down 1up 4down 9forward 6forward 9up 6up 4forward 3forward 2forward 1down 1down 2forward 8up 6forward 5up 4down 1forward 5down 3down 6up 7forward 2forward 6forward 7forward 4down 5down 4forward 4down 6up 2up 2forward 7forward 3down 8down 1down 8forward 7forward 7up 5forward 4up 8down 9down 4down 4forward 5down 1forward 2down 6up 4down 8down 1down 9down 5up 5forward 4down 2down 8down 4forward 4forward 5down 8up 9forward 7forward 6down 8down 3up 7down 7forward 2forward 5forward 7down 9up 1down 6down 2forward 6forward 3forward 3up 9forward 4down 5down 7forward 8forward 6forward 5down 9down 5down 1down 7forward 9forward 8down 2down 4down 1up 5up 5forward 5down 3down 1forward 8up 9up 3down 3up 3up 5forward 8down 3up 3down 9up 6up 8forward 5up 2down 6forward 3down 2down 4forward 9forward 6forward 3up 5down 9down 7forward 9forward 7forward 5up 5up 1down 6forward 4forward 4down 7down 1up 3forward 6forward 4down 1forward 5forward 3forward 1forward 3up 3up 9down 7down 4forward 8down 8down 3up 2down 8forward 5down 7forward 6down 9up 5forward 4down 2forward 6down 8down 7forward 8forward 5down 2forward 7forward 5forward 7down 8forward 5down 8down 6down 7down 9forward 9down 6forward 8up 6up 1down 5forward 1forward 7up 2up 5up 6down 5down 5forward 7down 9down 2forward 9forward 3down 5up 2up 8forward 5forward 8up 1forward 3forward 1up 4forward 1down 9down 6forward 1down 4down 4forward 9down 3up 6down 3forward 6forward 6down 3forward 6down 3down 1forward 3down 7up 9forward 1down 7down 2up 8down 1down 9down 1down 4down 6down 3down 7down 2down 9down 2forward 4up 3down 4up 4down 1forward 5forward 7down 7forward 9forward 6down 8forward 6forward 7up 3down 3up 6forward 7up 4forward 4down 1up 8forward 7down 2up 6forward 1forward 3up 9up 8up 5forward 7up 5down 6forward 7forward 7down 4down 3forward 2down 8up 9up 6forward 7forward 5down 9down 2up 5down 3down 3up 5down 8forward 7down 4down 2up 9down 5down 8down 5down 6forward 9down 3down 8forward 3down 1down 9forward 1down 3up 9up 3forward 8up 2down 4up 5up 4down 9down 5up 3forward 2down 8forward 8forward 7up 4down 9down 6up 1forward 9up 8forward 4up 3down 4up 2up 7down 2forward 3down 8down 9up 7up 8forward 3forward 1forward 7forward 5forward 9forward 2up 1down 1up 4forward 1up 9forward 7forward 2down 6down 5forward 9forward 4down 6down 6up 8down 3up 8down 3forward 2down 1down 1forward 5down 1forward 9up 8forward 2down 5up 8up 8forward 8forward 8forward 3forward 2forward 8forward 9forward 8forward 6forward 4up 7forward 9forward 8up 7forward 6forward 9forward 8down 7forward 9down 4down 1up 1up 9forward 2down 6down 2down 8down 6up 8forward 7up 9forward 5forward 4forward 8up 4forward 4up 6forward 7forward 1up 8down 6forward 7forward 3forward 2down 4forward 4down 7down 6down 2up 3up 5down 7down 9up 8down 1up 1down 8up 8forward 8down 6down 1down 6forward 3down 9down 5up 3down 1down 1forward 4down 4up 3forward 8up 4down 3down 5down 3forward 6forward 3down 2forward 9forward 3forward 2down 2forward 6down 1down 1forward 5forward 4forward 6down 7forward 7forward 3forward 1up 3down 6forward 1up 9forward 9forward 5forward 3forward 3down 3up 8forward 5up 6forward 2down 7forward 2forward 8forward 8forward 3up 9down 5down 3forward 7up 9forward 4down 1down 3down 5down 2forward 9up 6down 3down 7down 3up 6forward 3down 4forward 2down 8down 2forward 7down 2down 9forward 1down 1down 9down 6forward 5down 1up 1forward 5forward 4forward 9down 3forward 3forward 5down 9forward 9down 8down 2forward 1up 1down 5forward 2up 9forward 9forward 7forward 9forward 3down 7forward 2down 4up 3down 7down 6forward 2down 2forward 8up 9down 1forward 7down 8forward 3down 2down 5down 5down 3forward 1up 9up 9down 8down 6up 7forward 7down 4forward 6down 9up 5up 6forward 4forward 1forward 1down 7down 8down 2down 4down 3up 8down 3forward 3forward 8up 3down 2forward 4down 3forward 5up 1down 9down 1down 4forward 3forward 6forward 7forward 2forward 9forward 1forward 6forward 7forward 2up 1down 6down 1forward 6down 6down 5forward 1'! !!AdventOfCode2021Tests methodsFor: 'input data' stamp: 'BSTJ 12/2/2021 02:35'!day02Puzzle02Data^'forward 2down 4down 1down 4forward 3down 6down 5forward 3forward 8down 2down 3up 8down 5up 7down 7forward 5up 2down 6forward 7forward 1forward 2forward 7up 7forward 6down 3down 1up 9down 2up 1down 1up 6forward 6down 7forward 6up 1down 6forward 2up 7forward 4forward 8forward 7down 7forward 8down 1down 6down 7forward 4down 3up 7down 5down 9up 8up 4down 2down 3up 7forward 6forward 6forward 8forward 2up 5down 8down 3down 3down 4down 9down 6up 6forward 4down 6forward 3forward 3down 4down 8down 2up 5up 5forward 3forward 5down 7forward 6forward 9forward 8forward 2down 3down 3down 7down 1down 1down 1down 2down 8down 6forward 6up 1up 6down 7down 1forward 1up 2up 8up 8forward 2down 1down 8down 7down 1forward 1down 9up 3down 3forward 2down 3up 6down 2forward 7down 9down 6down 1forward 6down 4down 1down 3forward 3down 5forward 9down 5down 7up 8forward 8forward 8down 6down 1forward 8down 4up 4up 4up 2forward 2forward 2down 1up 8down 1down 7forward 5down 9down 2up 3down 1down 5forward 6down 7up 3forward 7down 4down 3forward 4up 8down 4forward 4forward 2forward 5down 5up 2forward 4down 4forward 6down 4forward 1down 5forward 2forward 2down 8forward 4forward 7down 3up 3forward 2forward 6forward 8down 2forward 4down 2up 9down 9down 2forward 5up 4forward 2down 2down 3forward 1down 2forward 8forward 8down 4forward 6down 3down 3down 5forward 8forward 4forward 1up 4up 2forward 8down 8forward 2forward 6up 1up 5forward 2forward 4forward 7forward 8forward 2down 3down 1down 9down 6up 5up 6forward 6down 3down 2down 1forward 5forward 2forward 7down 8down 7forward 7up 8forward 7down 1up 4forward 9forward 4forward 1down 3down 9down 7forward 1down 3forward 3down 4down 7forward 4up 6down 8up 1forward 6forward 1down 7down 8up 9up 4down 3down 7forward 8up 2up 6forward 8down 1up 4up 4forward 8down 2down 4down 3forward 5down 8forward 1down 2forward 9forward 3up 6down 6forward 6forward 4down 6down 3down 3forward 6down 5up 4down 9down 3down 6up 9forward 6down 2forward 7up 8down 3down 7down 9forward 6down 1forward 2down 1down 3down 3forward 5forward 2up 5forward 4up 7down 9forward 7forward 3down 6forward 1down 1up 8down 9up 3down 7up 9forward 7down 7down 9forward 9forward 7up 9down 7down 2down 7up 2down 3down 9down 6forward 7forward 8forward 8forward 6forward 9forward 4down 4down 5down 7forward 6forward 2forward 4forward 9down 4forward 6down 7up 1down 7forward 9forward 7down 4down 3up 6forward 8forward 7down 8forward 4up 6up 4forward 9forward 4forward 4forward 7down 1up 6forward 8forward 3up 6forward 4down 1up 2forward 1down 5forward 5up 4down 6down 3up 8forward 9down 2forward 4forward 8down 9forward 5forward 2down 9down 8forward 8down 7up 6forward 1up 9up 3forward 9down 6forward 9down 3down 3forward 7forward 5down 8down 9down 3down 6up 8down 9forward 8down 7down 5down 1up 4down 9forward 6forward 9up 6up 4forward 3forward 2forward 1down 1down 2forward 8up 6forward 5up 4down 1forward 5down 3down 6up 7forward 2forward 6forward 7forward 4down 5down 4forward 4down 6up 2up 2forward 7forward 3down 8down 1down 8forward 7forward 7up 5forward 4up 8down 9down 4down 4forward 5down 1forward 2down 6up 4down 8down 1down 9down 5up 5forward 4down 2down 8down 4forward 4forward 5down 8up 9forward 7forward 6down 8down 3up 7down 7forward 2forward 5forward 7down 9up 1down 6down 2forward 6forward 3forward 3up 9forward 4down 5down 7forward 8forward 6forward 5down 9down 5down 1down 7forward 9forward 8down 2down 4down 1up 5up 5forward 5down 3down 1forward 8up 9up 3down 3up 3up 5forward 8down 3up 3down 9up 6up 8forward 5up 2down 6forward 3down 2down 4forward 9forward 6forward 3up 5down 9down 7forward 9forward 7forward 5up 5up 1down 6forward 4forward 4down 7down 1up 3forward 6forward 4down 1forward 5forward 3forward 1forward 3up 3up 9down 7down 4forward 8down 8down 3up 2down 8forward 5down 7forward 6down 9up 5forward 4down 2forward 6down 8down 7forward 8forward 5down 2forward 7forward 5forward 7down 8forward 5down 8down 6down 7down 9forward 9down 6forward 8up 6up 1down 5forward 1forward 7up 2up 5up 6down 5down 5forward 7down 9down 2forward 9forward 3down 5up 2up 8forward 5forward 8up 1forward 3forward 1up 4forward 1down 9down 6forward 1down 4down 4forward 9down 3up 6down 3forward 6forward 6down 3forward 6down 3down 1forward 3down 7up 9forward 1down 7down 2up 8down 1down 9down 1down 4down 6down 3down 7down 2down 9down 2forward 4up 3down 4up 4down 1forward 5forward 7down 7forward 9forward 6down 8forward 6forward 7up 3down 3up 6forward 7up 4forward 4down 1up 8forward 7down 2up 6forward 1forward 3up 9up 8up 5forward 7up 5down 6forward 7forward 7down 4down 3forward 2down 8up 9up 6forward 7forward 5down 9down 2up 5down 3down 3up 5down 8forward 7down 4down 2up 9down 5down 8down 5down 6forward 9down 3down 8forward 3down 1down 9forward 1down 3up 9up 3forward 8up 2down 4up 5up 4down 9down 5up 3forward 2down 8forward 8forward 7up 4down 9down 6up 1forward 9up 8forward 4up 3down 4up 2up 7down 2forward 3down 8down 9up 7up 8forward 3forward 1forward 7forward 5forward 9forward 2up 1down 1up 4forward 1up 9forward 7forward 2down 6down 5forward 9forward 4down 6down 6up 8down 3up 8down 3forward 2down 1down 1forward 5down 1forward 9up 8forward 2down 5up 8up 8forward 8forward 8forward 3forward 2forward 8forward 9forward 8forward 6forward 4up 7forward 9forward 8up 7forward 6forward 9forward 8down 7forward 9down 4down 1up 1up 9forward 2down 6down 2down 8down 6up 8forward 7up 9forward 5forward 4forward 8up 4forward 4up 6forward 7forward 1up 8down 6forward 7forward 3forward 2down 4forward 4down 7down 6down 2up 3up 5down 7down 9up 8down 1up 1down 8up 8forward 8down 6down 1down 6forward 3down 9down 5up 3down 1down 1forward 4down 4up 3forward 8up 4down 3down 5down 3forward 6forward 3down 2forward 9forward 3forward 2down 2forward 6down 1down 1forward 5forward 4forward 6down 7forward 7forward 3forward 1up 3down 6forward 1up 9forward 9forward 5forward 3forward 3down 3up 8forward 5up 6forward 2down 7forward 2forward 8forward 8forward 3up 9down 5down 3forward 7up 9forward 4down 1down 3down 5down 2forward 9up 6down 3down 7down 3up 6forward 3down 4forward 2down 8down 2forward 7down 2down 9forward 1down 1down 9down 6forward 5down 1up 1forward 5forward 4forward 9down 3forward 3forward 5down 9forward 9down 8down 2forward 1up 1down 5forward 2up 9forward 9forward 7forward 9forward 3down 7forward 2down 4up 3down 7down 6forward 2down 2forward 8up 9down 1forward 7down 8forward 3down 2down 5down 5down 3forward 1up 9up 9down 8down 6up 7forward 7down 4forward 6down 9up 5up 6forward 4forward 1forward 1down 7down 8down 2down 4down 3up 8down 3forward 3forward 8up 3down 2forward 4down 3forward 5up 1down 9down 1down 4forward 3forward 6forward 7forward 2forward 9forward 1forward 6forward 7forward 2up 1down 6down 1forward 6down 6down 5forward 1'! !!AdventOfCode2021Tests methodsFor: 'input data' stamp: 'BSTJ 12/3/2021 00:08'!day03Example01Data	^'001001111010110101111010101111001111110010000110010001001010'! !!AdventOfCode2021Tests methodsFor: 'input data' stamp: 'BSTJ 12/3/2021 00:43'!day03Puzzle01Data	^'000110011011010011010000111101010001111101001000000010001110101111111010110111011000111010011100101101100011100011010000111010111100110011000110000100110100010101111101000100111101100110001111000001000101000101100011110001001101110100000100000111001011111110011011110110010000011001111110010100101010000100111100011000110110101010110011101110000111111000111011001000000110010100000000010000010000100100100000110010011100110000001011001010011111001010100101100100101111101110001000011011010101000111100000100111101011000010110000000100001110111110000000101100111111000010010111100001011111010111011100110101011011001010010010111100101001101100101100001011001110001001111001010010101001011000000100000011001110110100111000110011101110100011111111010111001010110100000011101101010010100101000100011010011001100110000110011111110000010110110110111100111000100011111001010110011011000001001001000111011010111110001101001011011100011110100101000000111000100110011010001110011000110110110010011111000101011100101100010001111111001011011000011010100010011101001001001101100000010011010100111001000011000000110100011010101100101001110000010000001011001011101101010000101010100000010001001000101101100101100111110101100011011110010111010011000010100111111000001010111100010010111100011100111100100111011111000100001011100000010111100111001101100100111010011100001001000110110001001100100001111011101101000001010100010000100011111000111110111011110001010111000111011000011001010101110001111000101001111010000000100010011111111000111000010011011111101110011101000110000001010010011011100101101000110101111011100010101001101010011010000100111000011011101001100100000100000010110100100100000111101110000011000100110010000110100110110111111010100000110101100111000000111111001001110100111101100000000110010101000011000101101010000101111001101100010000101111001010010011100110011001111100011001101010111001110001011100011101111011111110100010010100111000101010100000001011100111110001110110100111001000111001010101000000001010001011001010001100011110111011011101111111011100101101111000111010101101011100111010001000010011011001100011100101100001110110110010001001101101001011100100100111111011110101011001000100110010110010011011111000111011001000011011000010010111000110001001110011010001011000111001100110001001011000010101010100001001001111001100110010100001111000100001000101001000100111010110100001000011101001100011110110001000001101001000010100001010101000100001111101100101110101100011000001010001110110011011010111011001010110010101000110110010100010111011001111000111011111110001110100000100110101101001110110110111000011010001000000111000000110001100011110101101100001100000101111011010010001011001001011111001100001110100001100111001100000011011001000010011011000000100000100010000001100010010001110011001100101001011100111010111010111110010111101011011011001101011100110001001001001010000111001000001011101001111110010011100010010001010100100111111101011010100001011100110000111111110101110110111110110111010100100111010010010011100000110011100100010010001101111001100000100010101001111010101000100111111010010110010100100011110110010110100001011010010100110001001110111111101010111101010000110111000100110110000101110010100010011000111011100001010111000110000011010000111000100011011010000101101000110111100110111000001001000010011001100111001001100111101111110100100000001111101111011001101100100010100011010101000111000011100100101111001101011101010110010011010000100101101110001101110001101000000101001100001010010000000111101000100100100110010110011010001001011111010000101111100100011001110110101000011100001110011010100001011101001110100101101001111110011001001001110100011010100001001111010111101001001100100000000111000010111100010011100101000110011000010101011101100111000011000010110101101100100101010100110010110000010000110001000010111010110110001000101111010011110011101100101101011011111011101100100111111101100001111001000001100101011110000000110001000001110111001001001001111100111001110000101001001011110111001110100111100111011101000100001110101011101001100010100100111111101101001000111000111001001111010000001100101110110001110001110111001110000111000110010011110110001001101100001111010010111111011100100011000111101111111010011010110111110011010111101001110000110100000100010010100110001111101101010000101010000100010001001000000000001011011000100111000011100110000010100001101011011110110010001011100001110110010010011110000010111110000100011101100000101110011110011000101101000111011010001101111000010001011010101100110010001001010001101011010110110100110010111011101010011101101101111011011000001101100011111100110010100011001101011010001010011111001000110001000111101001101000100101000000001100011111000111000011110010100000110100110110101110111111000101010110100011100011110101111101110000110101111001001100101111100001000011011100100110011111110101110110101110111101000000001111000001011000001001110101010000100010100011011100010100111111110001111110001001001110101000001011110110010010001110100011011101101010110110111000100100100110011111001101110100000000011011100001010011001011001101110000000101111000011010010111110110000101000000001000111100000101110110101011100100011000011111000111100011000001101000011001001000101000100010101001100011110010001000011001000000011011111001010110011011001011000010111111011100100110010011100111010110111100111011110111101001010111111110111010000000100000011111111110110000011010011010111011110111001111101111111010110000111000110000100100000101011000000000101110101111001000100101101100010100001001110011011001011111001011011100010100010001001010000011011000110101100011110111000110000011000111001100101000010010110101011101010001000110001001111001110101011100100001101000010001101010011111111100010010001010010001111100011011111101100001011101101101110111100000110000111111001010111000000011110011011101101111101001000000010110001001110101110101111110001011011000100101010110111111111110111000110011101101000111101110001100110100010011100010111001001111101101010010000010110010001110011100101000010101101111101101111111000100100011000111000111101000111111111111000001010011000101011011001111000000000111010100011100111110100110111101100001100111011100011101000000100101111100001011110100110011000010101010001110111100010110000110011101101011111110110100010111101001100010010010101101010101100001111111001011111100001101101110101101011001011111010010000001111000000101001110100110110110101000110000101000111000111011000110101100001010101100101001110001101101111010111100001101000011111011101110110101010101111001110110011111000010011001110101100011110110101001000011101011001110000001010010101000101010110001100100000111101011111101000010110010000000000101011010110011010000111110000111000100010110110101100100000110011000011010100111000001000001000000100111001000110000100110100001000011001010111111110101101001011011101101000101110000000011100100000110001001110100101111100000001111011101100001100011010101001100110010111011101000111110001010110000000000001010000011001001101110011100011111111111111010110011001100011001111010111101010110010111100111000001011101110010000100000100001100001110100000011110110101000011010111110010111111010011011111001101100000000011110111101110010101010001010010001010001110010100011000010101010100011111010001000000101001110010011000000110111010100010000001111100101001000010101110010011010100100100001001011101110110110010111000110011111000001111001101001101100010111001011001001001000111101000110100000010000001011000111110010001100100000000100000010101111111100010001001100001100101001101110011010100011000101100001011101011010011110110011010111001001101111010101000100000001100001110001011101001111100010000111110101010100111000001100010001001010101000010010001101001110101010011110010101100111011001000011000110111111101110100110001001101110010100111001010010001100100100010011000011110111101100100001000010111101011001010100110000100111110011111000101100110000001111001001110001111111001101011110010110111111011111100011011001001000101100000010011110011111101101100111100010001111000001100001100100001110001000110111010001001101110111111100101110100100101010010010001100100011100101110001110111100001010100101101110000000000111110001010010111100110100101000001000101111100110000000001110101011110001010010100000111110011011101000001001100110100100010101100110100000000100010100011111010100111010110001110000001101010010011000001111000100101000001010110000000110011001111111101101111110001100100111111110101101001111011100110100110011101110001100111010010010001101001100100010110000001101110010001101000111110101010100000000011100010010010110001101100000110111010010110100101001100000101010011101010111111101100010010101111100010101101101100000110010100111111110011100111010100000100000010101000000000100101010011100111101110100111110000100010111001001010011100010111110000001101001000100011010110101010101000001111111111011111001111001000110100000010100100010001001110000011011110011010001010111001010010001111101001010101100110000110101001100011011001000111000010010111001100110111011001000010100110100011001100110110101100010001100110011111001110101110010100001011000110101101111011010011101010110001110111100000010101001110001010111000000111110011010101101010010111001011000011101110010010011101100110101011011011111000110001111101011100100001000010100001100000010011010011101010101010111011110010100010111000101110011010011001001001101000101010000001000100010110011111001110010101111100101011101011110111100000111001111101100010100111000100100001001000101100011011010011000100110110101101010100011001100000111010101100000000110110010101101001000000000100000000010101001110001011001111010010011101010110001111000000001111110110010010000011010000101000110001110001101110001011111000011111101011110000001000010100111111100001100110011111010101111100101000101101110111001111000100010000000001111010101000001111011011001001100110101000001100100110010011100001011010110101001010010011000111101101011011110110000001010011111001000010011101001101000111011110010010001100101101110100011110001000110000101101000001101000101001101100110001010110101110110010011101001111011100011000010111000011100000100010110000001010110001001011111110001000000011011110110000100010111110100111101010100111010010010010110010101110110110111011011111011111011100101111110100110011101011110001000001101101010001011000011111010000110111001111101010011100011111001000100000101110001001101000001110000010000010111010100010001111011000000010111000101101100110111100011001010100011110101101010000001000100110011010110010001111101111010111101000010110011010001000010010110101010111101111110010111110111101100100111110000101000110000100010011010000111111110111011111111100001111011011110100000101011000111001011010000101101111110000101111011101001101000001010011000001001111000111010000001000011110111111001101110100011101110110111111111000101000000000110110000111101010010001100001011111100111101100000100101001001101011101101101110010001010101100110111011001111011111100010010010111000010000001000010111110101100111011101000111111110111111001111110010011010101010101010000000101011011110011010001001001010011011111111101101001100001001010010110100001010111110011100110110000001101011110111010100011101110101101001010101110000110011011100101101111010100001011101011110001101011100011011010111001010110001110101000111110000111011011011111100011000110011000101101100011001110001101101101110111101011110000000101010010000110110000111100000000001110110110011001010111000001111000010110000101001111011001111010101100110010001111110000011100110000010110111011100110001101111110111111010001100101101011110110110000100001000001100110000000100011101110101010110100011001101111111111111001101000111100011101100010001000011110101110111111010001110010110000001111000101110110001010000101000010011011111001100101000111010110000111000101001010110010100110110000110001110101011001010111001000111111001110000110110101001100010110011010100110'! !!AdventOfCode2021Tests methodsFor: 'input data' stamp: 'BSTJ 12/3/2021 08:02'!day03Puzzle02Data	^'000110011011010011010000111101010001111101001000000010001110101111111010110111011000111010011100101101100011100011010000111010111100110011000110000100110100010101111101000100111101100110001111000001000101000101100011110001001101110100000100000111001011111110011011110110010000011001111110010100101010000100111100011000110110101010110011101110000111111000111011001000000110010100000000010000010000100100100000110010011100110000001011001010011111001010100101100100101111101110001000011011010101000111100000100111101011000010110000000100001110111110000000101100111111000010010111100001011111010111011100110101011011001010010010111100101001101100101100001011001110001001111001010010101001011000000100000011001110110100111000110011101110100011111111010111001010110100000011101101010010100101000100011010011001100110000110011111110000010110110110111100111000100011111001010110011011000001001001000111011010111110001101001011011100011110100101000000111000100110011010001110011000110110110010011111000101011100101100010001111111001011011000011010100010011101001001001101100000010011010100111001000011000000110100011010101100101001110000010000001011001011101101010000101010100000010001001000101101100101100111110101100011011110010111010011000010100111111000001010111100010010111100011100111100100111011111000100001011100000010111100111001101100100111010011100001001000110110001001100100001111011101101000001010100010000100011111000111110111011110001010111000111011000011001010101110001111000101001111010000000100010011111111000111000010011011111101110011101000110000001010010011011100101101000110101111011100010101001101010011010000100111000011011101001100100000100000010110100100100000111101110000011000100110010000110100110110111111010100000110101100111000000111111001001110100111101100000000110010101000011000101101010000101111001101100010000101111001010010011100110011001111100011001101010111001110001011100011101111011111110100010010100111000101010100000001011100111110001110110100111001000111001010101000000001010001011001010001100011110111011011101111111011100101101111000111010101101011100111010001000010011011001100011100101100001110110110010001001101101001011100100100111111011110101011001000100110010110010011011111000111011001000011011000010010111000110001001110011010001011000111001100110001001011000010101010100001001001111001100110010100001111000100001000101001000100111010110100001000011101001100011110110001000001101001000010100001010101000100001111101100101110101100011000001010001110110011011010111011001010110010101000110110010100010111011001111000111011111110001110100000100110101101001110110110111000011010001000000111000000110001100011110101101100001100000101111011010010001011001001011111001100001110100001100111001100000011011001000010011011000000100000100010000001100010010001110011001100101001011100111010111010111110010111101011011011001101011100110001001001001010000111001000001011101001111110010011100010010001010100100111111101011010100001011100110000111111110101110110111110110111010100100111010010010011100000110011100100010010001101111001100000100010101001111010101000100111111010010110010100100011110110010110100001011010010100110001001110111111101010111101010000110111000100110110000101110010100010011000111011100001010111000110000011010000111000100011011010000101101000110111100110111000001001000010011001100111001001100111101111110100100000001111101111011001101100100010100011010101000111000011100100101111001101011101010110010011010000100101101110001101110001101000000101001100001010010000000111101000100100100110010110011010001001011111010000101111100100011001110110101000011100001110011010100001011101001110100101101001111110011001001001110100011010100001001111010111101001001100100000000111000010111100010011100101000110011000010101011101100111000011000010110101101100100101010100110010110000010000110001000010111010110110001000101111010011110011101100101101011011111011101100100111111101100001111001000001100101011110000000110001000001110111001001001001111100111001110000101001001011110111001110100111100111011101000100001110101011101001100010100100111111101101001000111000111001001111010000001100101110110001110001110111001110000111000110010011110110001001101100001111010010111111011100100011000111101111111010011010110111110011010111101001110000110100000100010010100110001111101101010000101010000100010001001000000000001011011000100111000011100110000010100001101011011110110010001011100001110110010010011110000010111110000100011101100000101110011110011000101101000111011010001101111000010001011010101100110010001001010001101011010110110100110010111011101010011101101101111011011000001101100011111100110010100011001101011010001010011111001000110001000111101001101000100101000000001100011111000111000011110010100000110100110110101110111111000101010110100011100011110101111101110000110101111001001100101111100001000011011100100110011111110101110110101110111101000000001111000001011000001001110101010000100010100011011100010100111111110001111110001001001110101000001011110110010010001110100011011101101010110110111000100100100110011111001101110100000000011011100001010011001011001101110000000101111000011010010111110110000101000000001000111100000101110110101011100100011000011111000111100011000001101000011001001000101000100010101001100011110010001000011001000000011011111001010110011011001011000010111111011100100110010011100111010110111100111011110111101001010111111110111010000000100000011111111110110000011010011010111011110111001111101111111010110000111000110000100100000101011000000000101110101111001000100101101100010100001001110011011001011111001011011100010100010001001010000011011000110101100011110111000110000011000111001100101000010010110101011101010001000110001001111001110101011100100001101000010001101010011111111100010010001010010001111100011011111101100001011101101101110111100000110000111111001010111000000011110011011101101111101001000000010110001001110101110101111110001011011000100101010110111111111110111000110011101101000111101110001100110100010011100010111001001111101101010010000010110010001110011100101000010101101111101101111111000100100011000111000111101000111111111111000001010011000101011011001111000000000111010100011100111110100110111101100001100111011100011101000000100101111100001011110100110011000010101010001110111100010110000110011101101011111110110100010111101001100010010010101101010101100001111111001011111100001101101110101101011001011111010010000001111000000101001110100110110110101000110000101000111000111011000110101100001010101100101001110001101101111010111100001101000011111011101110110101010101111001110110011111000010011001110101100011110110101001000011101011001110000001010010101000101010110001100100000111101011111101000010110010000000000101011010110011010000111110000111000100010110110101100100000110011000011010100111000001000001000000100111001000110000100110100001000011001010111111110101101001011011101101000101110000000011100100000110001001110100101111100000001111011101100001100011010101001100110010111011101000111110001010110000000000001010000011001001101110011100011111111111111010110011001100011001111010111101010110010111100111000001011101110010000100000100001100001110100000011110110101000011010111110010111111010011011111001101100000000011110111101110010101010001010010001010001110010100011000010101010100011111010001000000101001110010011000000110111010100010000001111100101001000010101110010011010100100100001001011101110110110010111000110011111000001111001101001101100010111001011001001001000111101000110100000010000001011000111110010001100100000000100000010101111111100010001001100001100101001101110011010100011000101100001011101011010011110110011010111001001101111010101000100000001100001110001011101001111100010000111110101010100111000001100010001001010101000010010001101001110101010011110010101100111011001000011000110111111101110100110001001101110010100111001010010001100100100010011000011110111101100100001000010111101011001010100110000100111110011111000101100110000001111001001110001111111001101011110010110111111011111100011011001001000101100000010011110011111101101100111100010001111000001100001100100001110001000110111010001001101110111111100101110100100101010010010001100100011100101110001110111100001010100101101110000000000111110001010010111100110100101000001000101111100110000000001110101011110001010010100000111110011011101000001001100110100100010101100110100000000100010100011111010100111010110001110000001101010010011000001111000100101000001010110000000110011001111111101101111110001100100111111110101101001111011100110100110011101110001100111010010010001101001100100010110000001101110010001101000111110101010100000000011100010010010110001101100000110111010010110100101001100000101010011101010111111101100010010101111100010101101101100000110010100111111110011100111010100000100000010101000000000100101010011100111101110100111110000100010111001001010011100010111110000001101001000100011010110101010101000001111111111011111001111001000110100000010100100010001001110000011011110011010001010111001010010001111101001010101100110000110101001100011011001000111000010010111001100110111011001000010100110100011001100110110101100010001100110011111001110101110010100001011000110101101111011010011101010110001110111100000010101001110001010111000000111110011010101101010010111001011000011101110010010011101100110101011011011111000110001111101011100100001000010100001100000010011010011101010101010111011110010100010111000101110011010011001001001101000101010000001000100010110011111001110010101111100101011101011110111100000111001111101100010100111000100100001001000101100011011010011000100110110101101010100011001100000111010101100000000110110010101101001000000000100000000010101001110001011001111010010011101010110001111000000001111110110010010000011010000101000110001110001101110001011111000011111101011110000001000010100111111100001100110011111010101111100101000101101110111001111000100010000000001111010101000001111011011001001100110101000001100100110010011100001011010110101001010010011000111101101011011110110000001010011111001000010011101001101000111011110010010001100101101110100011110001000110000101101000001101000101001101100110001010110101110110010011101001111011100011000010111000011100000100010110000001010110001001011111110001000000011011110110000100010111110100111101010100111010010010010110010101110110110111011011111011111011100101111110100110011101011110001000001101101010001011000011111010000110111001111101010011100011111001000100000101110001001101000001110000010000010111010100010001111011000000010111000101101100110111100011001010100011110101101010000001000100110011010110010001111101111010111101000010110011010001000010010110101010111101111110010111110111101100100111110000101000110000100010011010000111111110111011111111100001111011011110100000101011000111001011010000101101111110000101111011101001101000001010011000001001111000111010000001000011110111111001101110100011101110110111111111000101000000000110110000111101010010001100001011111100111101100000100101001001101011101101101110010001010101100110111011001111011111100010010010111000010000001000010111110101100111011101000111111110111111001111110010011010101010101010000000101011011110011010001001001010011011111111101101001100001001010010110100001010111110011100110110000001101011110111010100011101110101101001010101110000110011011100101101111010100001011101011110001101011100011011010111001010110001110101000111110000111011011011111100011000110011000101101100011001110001101101101110111101011110000000101010010000110110000111100000000001110110110011001010111000001111000010110000101001111011001111010101100110010001111110000011100110000010110111011100110001101111110111111010001100101101011110110110000100001000001100110000000100011101110101010110100011001101111111111111001101000111100011101100010001000011110101110111111010001110010110000001111000101110110001010000101000010011011111001100101000111010110000111000101001010110010100110110000110001110101011001010111001000111111001110000110110101001100010110011010100110'! !!AdventOfCode2021Tests methodsFor: 'input data' stamp: 'BSTJ 12/4/2021 23:34'!day04Example01Data	^'7,4,9,5,11,17,23,2,0,14,21,24,10,16,13,6,15,25,12,22,18,20,8,19,3,26,122 13 17 11  0 8  2 23  4 2421  9 14 16  7 6 10  3 18  5 1 12 20 15 19 3 15  0  2 22 9 18 13 17  519  8  7 25 2320 11 10 24  414 21 16 12  614 21 17 24  410 16 15  9 1918  8 23 26 2022 11 13  6  5 2  0 12  3  7'! !!AdventOfCode2021Tests methodsFor: 'input data' stamp: 'BSTJ 12/4/2021 23:34'!day04Puzzle01Data	^'30,35,8,2,39,37,72,7,81,41,25,46,56,18,89,70,0,15,84,75,88,67,42,44,94,71,79,65,58,52,96,83,54,29,14,95,66,61,97,68,57,90,55,32,17,47,20,98,1,69,63,62,31,86,77,85,87,93,26,40,24,19,48,76,73,49,34,45,82,22,80,78,23,6,59,91,64,43,21,51,13,3,53,99,4,28,33,74,12,9,36,50,60,11,27,10,5,16,92,3894 97 41 22 4821 47 72 23 2612 81 86 24 9171 78 90 59 5492 63 68 65  175 62 66 74 3714 79 35 96 3033 25 29 57  660 93 17 55 5365 16 59 40 2726 60 95 24 7855 12 22 68 4367 48 85 66 3629 80 52  3 5611 59 41 15 1865 44 99 82 1314 62 46 61 84 4 38  7 29  036 40 27 20 1231 18 15 42 5590 77 52 24 5658 82 19 74 8797 93 25 91 9540 83 99  9 4661 94 96 57 4140 28 30 81 6471 82 10 44 7298 31  3 90 67 5 47 61 22 5985  0 68 57 1469 97 61 75 34 2 12 45 15 6371 66 85 39 6478 50  0 96 4152  3 82 43 7414 92 59 71 2440  8 41 19 83 7 65 21 51  655 49  2 97 3637 86 56 32 3368 95 17 24 82 6 70 45  8 2352 59 55  4 3162  2 46 64 3643 42 93 44 9055 58 88 48 1281  8 28  3 2696 44 80 22 9721 57 74 53 7290 77 13 56 3769 49 48 37 4184  9 24 18 3070 61 86 25  074 50  1 33 8797 46 72 60 8092 66 39 59 4325 41 34 26 35 3 18 90 52 6083 29 24 93 2872  2 50 17 7161 83 19 90 66 3 57 69 39 85 4  7 60 71 3764 75 58 67 1741 89  6 31 7288 28 89  9 4870 45  6 72 85 7 39 26 58 4498 16 33 86 7621 99 82  1 8150 20 44 11  153 73 33 86 9541 21 68 42 2826 90 39 94 51 3 77  2  0 5597 19 80 48 1878 92 99 10 2316 55 33 26 5825 30 62 17 5460 22 69 21 68 6 47 50 19 2460 95  8 90 3820 59 73  3 5714 87 93 35 2997 85 49 12 7914 77 64  0 4045 70  3  5 8197 73 11 67 3393 24 23 79  217 10 54 35 5130  3 57 41 1859 21 74 83 8612 85 82 67 4872 77 49 93 5566 76 43 34 9188 19 38 24 5160 43 67  1 5542 47 79 45 7353 25  8 77 1534 61 76 70 74 7 91 17 69 57 0 24 16 21 5370 13 46 39 5632 81 48 15 2241 58 26 45 1452 77 31 89 9334 87 21 64 7141 38  9 39 3097  1 83 20 6162  5 27 88 9974 87 89 29 4454 49 36 62 7753 72 59 70 1527 47  1 84 1955 78 56 52 6664 29 67 44 8284 38  3 59 7288 53 45 62 2193 12 16 15 5297 98 54  9  693  4 37 44 8695  5 13 92 23 2 55 39 52 8932 35 51 99 4742 74 56 67 5993 37  3 16 3542 75 18 72 9548 23 91 81 6654 49 62 67 3656 69 58 50 1491 58 41 81 1886 17 67  2 23 4 75 78 66 4326 94 77 39 8892  5 38 29 5678 60 23 42 3198 55 37 53 8241 87 12 69 7384  8 96 13 4516 59 40 67 7783 64 43 12 9325 88 49 51 2197 41 92 68  186 98 47 75 3811 63 70 31 19 7 35 93 29 9412 41 30 46 9622 78  3 50 3813 18 53 81 7176 69 16 67 5660 44  8 12 5731 11 79 28 2798 94 17 88 99 3 93 84 83 9690 56 40 15  013 96 27 41 4864  6 52 58  317 15 50 89 1049 12 26 82  083 95 30 32 2198 44 68 91 1266 45  8 24  2 3 15  9 99 2059 37 97 33 7985 73  5 39 3221 11  2 17 6797 78 32 73 3451 89 38 20 5335 76 31 62 66 3 79 88  4 1040 14 63 55 2162 87 67 72 8293 79 31 98 6480 13 47 25 6676 65 26 96  512  3 33 49 2391 97 35 99 2773 44 79 26 4890 65 78 64 34 4 32  5 19 4036 77  2 85 4616 67 63 49 5127 90 62 88 72 8 12 95 83 3447 74 11 30 4860 84 55 19 4797 18 44 52 8850  0 29 36 5877 65 21 49 4087 39 89 31 2744 57 78 25  359 70  2 11 9663 94 23 50 9255 85 88 52 1440  4 75 90  643 72 12  6 9298 26  4 22  354 89 19 58  897 17 49 71 5748 29 60 86 5617 74 31 40 4524 32 64 13 80 5 43  3 23  786 97 93 78 5595 68 21 99 1293 12 24  3 8054 71 95 64 6875 22  9 85 3862 77 28 48 1936 47 30 40  711 95 28  2 3264 91 90 24 3744 31  4 43 68 9  8 52 72 7425 63 13 18 5417 61 46  3 6314 37 25 95 4840 60 74 91 5642 67 81 10 4351 16 72 87 5229 92 47 15 3132 34 61 48 6378 26 22 36 7330 76 95 97 1274 67 77 86 6445 22 20 77 6141 15 46 82 2565 44 63 40 3957 36 19 66 1013 75 83 26 4772 83 19 92 4142 75 38 88 2458 34 22 48 7670 86 17 53 26 7 33 52 59 8513 98 64  0 7821 23 75  9 6770 71  1 33 9642 53 38 55 8072 95  7 51 49 8 64 15 28 7769 86 97 50 8831 29 16 22 8172 39 11 67 8551 61  5 91 1819 63 76 58  7 8 67 46 53 5099 87 95 91 5630 88 89 11 8339 62 68 28 4038 21  1 81 4641  6  9 86 4079 29 90 55 8468 63 93 27 7065 33  4 75 9844 72 66 58  553 13 91  2 9392 11 71 83 7585 50 29 77 7331 10 45 36 9863 85 15 12  027 29 97 42 4533 82 40 28 6451 22 47 94  291 57 73 87 1475 98 31 26 5771 18 77 17 1622 72 54 44 8153 35 12  6 3067  1 46  7 3951 16 61 91 1813  9 57 30 4053 76 23 81 4580 41 11 98  835  4 58 54 2087 74 46 16 49 2 31 68 35 7560 89 45 11 5073 44 32 61 3485  5 10 43 4269 53 13 46 8149 58 51 25 6722 19 45  6 3083 32  9 61 9155 11 34 42 5068 71 96 31 1198 84 57 48  6 0 99 62 74 76 1 37 54 72 1691 81 75 24 4049 14 42 88 79 9 63 51 34 78 5 27 57 81 4060 64 45 92 5052 20 59 44 9763 72 98 90 5756 76 92 77  941 21 93 23 39 3 28 74  8 6515 42 59  7 4628 75 84  6  899 69 56 62 7278 45 50 42 9273 59 61 27 33 0 24  4 44 1823  5 88  2 7135 41 45 51 1453 83 95 66 8470 92 76 96 90 1 37 17 74 50 7 65  5 39 9580 18 66 69 3293 79  6 37 55 1  0 47 73  323 40  2 44 6148 53 25 76 5235 83 97 99 3322 86  1 55 7382 43 40 50 8718  3 51 75 8125 62 69 24 6461 41 39 44 3093 52 33 26 2882  8 50 36 7568 48 94  1 8572 67  3 54 8024 14 46 27 9226 25 56 49 6119 84  0  6  991  1 39  4 7874 14 20 58 8399 89 60 31 9313  3 77 62 9410 82 85 32 4965 79  9 29 5098  6 94 60 6874 38 64 10 1823 20 95 33 9067 28 17 12 6519 40 61 47 2248 69 14 93 5375 55 96 51 8752 82 72 56 1784 44 70 83 3497 37 85 92 5931 92 13 90 4381 51 58 52 8376 15 18 87 9810 37 94 93 2655 44 48 67 2950 86 33  5 6159 46 42 80 7782 30  6 19 8741 57 78 60 4926 18 55 15 2573  7 14 51 5855 22 11 30 6769 32 93 83 4259 60 40 63  1 9 12 48 47 4361 50  3  5 6639 73 53 38 8937 34 80 95 7464 16 44 54 4846 79 69 24 1376 66 15 33 9662  9  3 74 7277 75 80 56 31 1 43 52 87 4423 51  7 53 3051 73 93 15 1991 90 61 96 1339 48 54 66  616 25 47 10 8136 29 55 46 7244 93 12 94 5314 22 92 23 7871 47 39  5 5449 86 48 65 8461  7 67 36  392 45 59 10 8276 30  8 86 3888 36  3 55 9641 24 64 87 4235  7 16 54  018 82  8  9 77 5 91 61 21 8359 13 15 67 2936 48 88 90 1768 12 25 23 2297 79 74 44 7647 23 25 37 1698 42 29 26 6291 36  7 20 5087 12 21 92 7765 24 33 50 5436 59 89 29  315 25 39 95 8366 62 58 47 4121 37 64 93 6991 60 47 93 5469 70 66 85 7461  5  9 37 4051 99 42 82 2684 30 19 11 7583  2 27 92 4675 43 69 65 3176 70 34 97 95 1  6 49 66 8291 55 98 80 5410  2 59 74 2492 73 88  7 8211 30 98 45 9728 14 67 47 6323 22 55 48 89 8 90 50  4  086 16 18 28 1376 37 31 46 3851 54 21 14 2759 23 49 97  1 6 80 36 74 9699 27 73 18 6484 79 95 24  038  4 15 91 4229 87 48 35 32 4  3 73 77 2965 64 96 31 40 9 59 45  2  888  0 87 70 8917 79 54 61 2451 69 66 98 3927 30 57 35 4675 19 31 44 8458 25 78  8 8624 83 33 34 2220 59 63 33 5678 47 37 48 8611 66 83 97 8927 55 52 94 2670 45  1 18 1341 14 64 31 1985 76 52 34 5737  7 77  0 6693 11  3 12 7467  9 63  1 8812 58 86 72 9680 75 99 40 9882 29  2 53 6088 46 57 83  813 77 69 38 3068 90 26 31 6087 62 88 50 9443 14 67 65 4121  8 66 13 1217 83 38 72 97 8 65 30 22 8750 19 73 83 9633 49 20 36 17 9  4 11 56 6042 75 62 57 68 4 28 15 16 6086 22 66 18 5227 51 61  8 2633  1 50 73 4811 70 17 76 8237 63 25 62 5973 47 91 35 7081 17 76 94 7571 36 92 57 4482 40  4 97  1 9 24 53 97 2011 89 90 86 9699 61 49 66 9368 22 26  7 8857 70 12 63 3452 72 93 55 7427  2 98  8  477 36 63 59 5443 69 79 85 8464 76 19 80 2198 80 54 45 2647 71 35 38 2167 13 28 65 3141 17 82 22  912 10 91 39 34 0 79 49 14 4493 69 46 19 5463 89 60 95 2047 24 33 16  635 27 61 29 2857 40 49 31  174 61 21 85 2695 83 69  8 2934 25 17 82 9278 14 53 65 8718 97 74 79 1578 57 41 44 6448 21  2 59 9630 73 34 86 1639 37 98 76 63'! !!AdventOfCode2021Tests methodsFor: 'input data' stamp: 'BSTJ 12/6/2021 01:17'!day05Example01Data	^'0,9 -> 5,98,0 -> 0,89,4 -> 3,42,2 -> 2,17,0 -> 7,46,4 -> 2,00,9 -> 2,93,4 -> 1,40,0 -> 8,85,5 -> 8,2'! !!AdventOfCode2021Tests methodsFor: 'input data' stamp: 'BSTJ 12/6/2021 21:34'!day05Example02Data	^'0,9 -> 5,98,0 -> 0,89,4 -> 3,42,2 -> 2,17,0 -> 7,46,4 -> 2,00,9 -> 2,93,4 -> 1,40,0 -> 8,85,5 -> 8,2'! !!AdventOfCode2021Tests methodsFor: 'input data' stamp: 'BSTJ 12/6/2021 01:50'!day05Puzzle01Data	^'503,977 -> 843,637437,518 -> 437,225269,250 -> 625,250846,751 -> 646,75118,731 -> 402,731749,923 -> 749,986557,758 -> 557,797589,54 -> 589,61620,136 -> 819,935123,983 -> 12,983802,624 -> 709,624600,458 -> 128,458209,703 -> 459,703944,415 -> 742,415270,718 -> 656,332168,339 -> 283,339558,172 -> 695,309519,524 -> 480,524456,400 -> 134,722355,961 -> 352,961757,158 -> 49,866300,254 -> 618,254554,275 -> 859,27547,612 -> 622,37696,885 -> 696,856342,803 -> 342,429830,649 -> 254,7354,921 -> 958,1772,691 -> 818,69180,72 -> 80,546762,649 -> 762,371117,39 -> 605,39778,605 -> 610,773159,25 -> 67,25462,825 -> 766,825295,167 -> 357,167741,379 -> 11,379942,230 -> 942,26802,672 -> 802,311672,759 -> 330,759419,97 -> 848,526244,262 -> 938,956281,988 -> 281,879471,451 -> 471,907238,387 -> 238,665907,129 -> 907,368119,734 -> 155,770306,119 -> 306,568166,175 -> 166,277591,32 -> 591,855779,324 -> 916,324785,245 -> 884,245504,884 -> 781,884405,967 -> 664,96717,16 -> 989,988429,944 -> 729,94415,31 -> 918,93422,963 -> 971,14199,280 -> 481,562792,550 -> 792,485215,141 -> 215,58511,560 -> 511,224940,134 -> 166,908666,212 -> 666,193881,514 -> 117,514271,416 -> 614,73354,784 -> 354,41866,152 -> 866,96975,924 -> 868,131944,507 -> 944,556726,315 -> 624,315195,122 -> 593,520463,311 -> 946,794734,698 -> 734,953520,98 -> 915,98125,139 -> 616,139570,841 -> 206,477430,442 -> 430,893653,59 -> 653,155906,883 -> 314,291932,157 -> 100,989526,244 -> 362,24428,837 -> 792,73386,426 -> 386,673121,66 -> 203,66747,121 -> 392,476590,989 -> 230,989795,83 -> 795,398741,522 -> 741,677142,166 -> 470,16613,645 -> 493,165418,567 -> 418,97094,877 -> 782,189603,426 -> 603,916364,304 -> 191,304754,146 -> 754,507294,678 -> 438,678641,633 -> 217,63331,133 -> 831,933250,976 -> 250,355274,558 -> 899,558818,507 -> 693,507414,465 -> 924,975116,729 -> 116,951960,843 -> 149,32724,127 -> 498,353552,43 -> 964,43224,853 -> 224,363768,214 -> 768,88518,414 -> 518,119917,824 -> 948,82437,81 -> 882,926333,390 -> 967,390175,453 -> 388,240960,395 -> 960,697468,37 -> 468,275745,318 -> 425,318676,425 -> 903,198531,663 -> 86,663557,834 -> 557,967650,931 -> 383,664906,197 -> 906,567675,637 -> 326,288227,977 -> 51,977347,524 -> 793,970778,850 -> 778,342343,155 -> 343,739970,167 -> 161,976800,127 -> 800,667531,533 -> 193,533222,776 -> 222,873922,29 -> 13,938452,808 -> 452,793926,142 -> 926,198940,93 -> 55,978335,51 -> 938,654789,352 -> 307,352457,419 -> 469,419463,12 -> 463,132881,95 -> 431,95531,57 -> 531,40179,308 -> 516,308767,907 -> 629,907362,457 -> 362,262774,896 -> 154,276549,243 -> 247,243130,933 -> 202,933266,639 -> 189,716209,717 -> 209,844625,296 -> 625,575739,785 -> 873,785713,857 -> 94,23897,28 -> 937,868876,734 -> 344,202180,608 -> 557,608669,566 -> 669,389112,779 -> 267,624325,669 -> 449,669102,915 -> 357,915882,839 -> 882,512330,699 -> 330,858773,851 -> 773,429171,187 -> 450,187166,726 -> 166,7415,134 -> 750,869245,126 -> 245,518919,484 -> 919,602918,900 -> 918,372736,515 -> 708,487790,777 -> 790,303479,541 -> 381,54185,243 -> 317,475619,441 -> 619,823688,658 -> 688,404381,475 -> 891,985461,529 -> 145,213833,885 -> 404,885315,502 -> 315,770450,934 -> 740,934634,334 -> 634,202785,866 -> 785,913976,627 -> 976,10265,491 -> 570,491974,257 -> 503,728662,938 -> 720,938232,472 -> 215,472805,504 -> 805,47699,909 -> 99,39964,947 -> 926,85123,645 -> 153,615908,10 -> 92,82649,174 -> 819,944115,136 -> 863,884695,91 -> 695,612715,527 -> 550,362914,125 -> 914,8614,980 -> 981,1314,308 -> 14,355356,895 -> 766,485989,10 -> 10,989833,292 -> 833,184786,785 -> 733,785824,53 -> 116,53349,547 -> 349,66594,189 -> 636,189359,399 -> 769,809600,751 -> 600,46520,236 -> 228,528978,610 -> 978,832689,575 -> 258,575664,734 -> 850,920245,672 -> 245,878337,509 -> 578,509893,613 -> 380,613875,608 -> 875,444264,701 -> 946,19358,267 -> 358,648926,61 -> 926,37846,885 -> 190,885662,131 -> 82,131301,53 -> 301,53321,839 -> 915,83992,174 -> 113,174145,680 -> 294,680268,773 -> 268,193698,893 -> 809,893300,512 -> 807,512749,408 -> 279,408439,214 -> 439,172622,740 -> 339,740400,253 -> 400,486859,686 -> 387,214974,485 -> 974,48670,987 -> 951,106630,449 -> 630,544796,212 -> 608,24835,959 -> 835,725779,755 -> 96,72582,778 -> 440,636350,479 -> 827,479924,40 -> 605,40918,832 -> 918,617669,590 -> 191,112748,214 -> 748,462350,703 -> 163,703393,791 -> 393,240569,857 -> 569,939412,375 -> 412,603488,975 -> 22,509100,372 -> 100,685170,669 -> 212,669546,734 -> 546,274492,172 -> 492,35436,134 -> 801,899501,773 -> 582,773287,694 -> 287,939381,988 -> 367,988609,360 -> 609,478310,158 -> 25,443409,716 -> 409,27655,959 -> 383,68716,697 -> 611,102184,290 -> 930,290580,79 -> 598,97950,65 -> 777,65144,288 -> 821,965986,685 -> 986,412549,702 -> 549,369841,148 -> 259,730958,31 -> 958,81012,908 -> 856,64264,793 -> 264,960249,115 -> 249,935707,714 -> 108,714527,192 -> 982,647703,883 -> 703,580535,346 -> 543,346851,185 -> 83,953984,586 -> 984,681913,574 -> 350,11317,221 -> 405,221398,673 -> 160,435953,264 -> 547,670790,115 -> 538,367943,236 -> 295,884571,746 -> 571,231286,318 -> 131,318143,251 -> 436,544838,435 -> 793,435732,782 -> 732,407244,287 -> 244,335376,29 -> 75,29604,732 -> 738,732730,30 -> 533,30891,474 -> 891,25786,140 -> 368,140951,583 -> 828,460665,897 -> 44,276217,905 -> 742,905745,583 -> 256,583923,22 -> 23,922763,336 -> 943,516755,678 -> 755,10135,790 -> 706,119841,658 -> 841,634986,66 -> 986,412740,69 -> 740,878852,733 -> 453,733657,273 -> 215,715239,824 -> 239,79340,482 -> 340,238969,834 -> 303,168238,718 -> 931,718603,63 -> 603,363596,135 -> 367,135184,474 -> 184,61239,60 -> 920,941456,103 -> 894,541929,35 -> 738,35199,528 -> 707,528649,251 -> 134,766969,209 -> 719,459568,45 -> 306,307259,703 -> 426,536964,737 -> 342,115101,890 -> 604,89057,223 -> 812,978939,99 -> 167,871920,438 -> 920,247185,384 -> 643,384489,783 -> 121,415837,938 -> 250,35163,920 -> 945,38475,45 -> 510,10881,872 -> 141,13224,238 -> 24,468409,523 -> 409,706200,309 -> 631,740586,385 -> 900,385219,250 -> 219,327854,526 -> 854,725946,343 -> 946,267847,746 -> 717,616172,203 -> 346,29693,652 -> 545,652824,115 -> 192,115843,908 -> 333,908769,784 -> 662,784490,535 -> 490,524545,699 -> 11,699792,544 -> 287,39895,712 -> 895,41887,350 -> 624,350614,475 -> 924,16593,961 -> 265,78957,71 -> 852,866282,738 -> 844,176898,251 -> 898,669949,872 -> 866,872765,408 -> 545,408691,503 -> 235,959198,491 -> 227,462973,40 -> 56,957802,402 -> 752,402911,60 -> 911,932545,244 -> 110,244461,26 -> 461,18916,308 -> 161,308368,476 -> 515,476656,916 -> 409,669118,950 -> 118,135963,294 -> 365,294855,713 -> 323,713849,930 -> 48,12936,337 -> 588,889941,394 -> 941,697685,170 -> 323,170423,683 -> 423,15281,522 -> 121,522357,598 -> 159,796211,192 -> 211,50615,607 -> 270,952687,384 -> 687,12881,896 -> 925,52591,988 -> 20,988950,740 -> 605,740818,772 -> 623,772790,405 -> 790,775483,34 -> 718,34309,190 -> 309,894391,83 -> 483,83721,201 -> 721,843990,464 -> 990,171479,707 -> 688,70723,775 -> 510,775783,863 -> 867,779594,151 -> 208,151416,936 -> 416,720981,972 -> 120,111773,476 -> 138,476604,900 -> 604,395824,437 -> 531,437621,948 -> 32,948802,26 -> 887,26836,335 -> 836,784134,585 -> 634,85649,87 -> 649,263756,804 -> 638,804982,26 -> 21,987134,976 -> 914,196612,539 -> 612,141977,11 -> 22,96640,80 -> 40,644725,562 -> 604,562377,649 -> 352,624418,146 -> 130,434848,927 -> 848,970243,350 -> 342,44946,10 -> 46,112800,654 -> 272,126910,633 -> 910,426296,619 -> 882,3375,922 -> 497,500267,616 -> 864,616884,694 -> 624,69413,656 -> 831,656389,390 -> 389,31626,24 -> 987,985193,557 -> 589,16118,13 -> 978,97343,951 -> 614,951581,398 -> 885,94943,525 -> 279,525787,83 -> 137,83729,271 -> 729,18100,383 -> 100,690337,266 -> 102,266106,640 -> 298,83283,65 -> 543,65102,872 -> 663,872921,765 -> 921,782764,392 -> 471,685325,987 -> 802,987983,43 -> 983,852833,475 -> 416,5825,270 -> 686,931145,433 -> 151,433132,329 -> 973,329611,494 -> 98,494401,633 -> 866,168532,126 -> 532,448988,894 -> 361,894249,177 -> 249,133832,71 -> 832,245263,70 -> 263,152548,333 -> 548,74898,570 -> 438,910954,41 -> 41,954336,199 -> 336,843117,974 -> 845,246831,456 -> 890,515690,114 -> 804,11494,108 -> 94,672289,104 -> 107,286248,580 -> 229,58011,284 -> 885,284401,802 -> 186,802359,245 -> 558,46310,85 -> 310,714920,577 -> 979,577492,236 -> 276,452650,961 -> 49,360118,705 -> 118,794970,24 -> 80,914943,454 -> 943,30875,935 -> 716,776241,717 -> 392,717694,345 -> 620,345533,435 -> 467,435827,166 -> 374,166633,849 -> 884,849414,640 -> 875,179240,790 -> 709,32148,222 -> 104,222889,897 -> 44,52980,438 -> 455,963469,875 -> 469,706572,869 -> 250,547834,11 -> 834,188395,966 -> 395,54712,681 -> 567,681268,957 -> 947,957450,478 -> 893,921418,707 -> 602,891404,303 -> 218,489657,232 -> 657,945518,392 -> 518,621268,959 -> 896,331886,616 -> 841,616375,503 -> 375,387'! !!AdventOfCode2021Tests methodsFor: 'input data' stamp: 'BSTJ 12/7/2021 19:41'!day06Example01Data	^'3,4,3,1,2'! !!AdventOfCode2021Tests methodsFor: 'input data' stamp: 'BSTJ 12/7/2021 19:42'!day06Puzzle01Data	^'5,1,1,4,1,1,4,1,1,1,1,1,1,1,1,1,1,1,4,2,1,1,1,3,5,1,1,1,5,4,1,1,1,2,2,1,1,1,2,1,1,1,2,5,2,1,2,2,3,1,1,1,1,1,1,1,1,5,1,1,4,1,1,1,5,4,1,1,3,3,2,1,1,1,5,1,1,4,1,1,5,1,1,5,1,2,3,1,5,1,3,2,1,3,1,1,4,1,1,1,1,2,1,2,1,1,2,1,1,1,4,4,1,5,1,1,3,5,1,1,5,1,4,1,1,1,1,1,1,1,1,1,2,2,3,1,1,1,1,1,2,1,1,1,1,1,1,2,1,1,1,5,1,1,1,1,4,1,1,1,1,4,1,1,1,1,3,1,2,1,2,1,3,1,3,4,1,1,1,1,1,1,1,5,1,1,1,1,1,1,1,1,4,1,1,2,2,1,2,4,1,1,3,1,1,1,5,1,3,1,1,1,5,5,1,1,1,1,2,3,4,1,1,1,1,1,1,1,1,1,1,1,1,5,1,4,3,1,1,1,2,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,3,3,1,2,2,1,4,1,5,1,5,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,5,1,1,1,4,3,1,1,4'! !Object subclass: #BasicSubmarine	instanceVariableNames: 'depth horizontalPosition aim2'	classVariableNames: ''	poolDictionaries: ''	category: 'AdventOfCode2021'!!BasicSubmarine methodsFor: 'initialize-release' stamp: 'BSTJ 12/2/2021 02:48'!initialize 	super initialize.	depth := 0.	horizontalPosition := 0.! !!BasicSubmarine methodsFor: 'executing-commands' stamp: 'BSTJ 12/2/2021 02:00'!executeCommand: aString	| direction amount |		direction := aString substrings first asSymbol.	amount := aString substrings last asInteger.	self move: direction by: amount! !!BasicSubmarine methodsFor: 'moving' stamp: 'BSTJ 12/2/2021 02:05'!move: aDirection by: anInteger	(aDirection == #forward) ifTrue: [horizontalPosition := horizontalPosition + anInteger].	(aDirection == #up) ifTrue: [depth := depth - anInteger].	(aDirection == #down) ifTrue: [depth := depth + anInteger].! !!BasicSubmarine methodsFor: 'accessing' stamp: 'BSTJ 12/2/2021 02:47'!depth	^depth! !!BasicSubmarine methodsFor: 'accessing' stamp: 'BSTJ 12/2/2021 02:47'!horizontalPosition	^horizontalPosition! !Object subclass: #Bingo	instanceVariableNames: 'draws cards'	classVariableNames: ''	poolDictionaries: ''	category: 'AdventOfCode2021'!!Bingo methodsFor: 'finding-winners' stamp: 'BSTJ 12/6/2021 00:20'!findLastWinningCardAndDrawnNumber	|  lastWinner lastWinningNumber winningCards |		winningCards := OrderedCollection new.		draws do: [:number | cards do: [:car | | hit neverWon | 											neverWon := (winningCards includes: car) not.											neverWon												ifTrue: [hit := car isOnCard: number]												ifFalse: [hit := false].											(hit and: [car hasBingo]) 												ifTrue: [winningCards add: car.														lastWinner := car.														lastWinningNumber := number.																									]]] .										^Array with: lastWinner with: lastWinningNumber.! !!Bingo methodsFor: 'finding-winners' stamp: 'BSTJ 12/5/2021 23:53'!findWinningCardAndDrawnNumber	draws do: [:number | cards do: [:car | | hit | 														hit := car isOnCard: number.											(hit and: [car hasBingo]) ifTrue: [^Array with: car with: number.]											].] .										self error: 'Should not get here!!'! !!Bingo methodsFor: 'accessing' stamp: 'BSTJ 12/5/2021 22:00'!cards	^cards! !!Bingo methodsFor: 'accessing' stamp: 'BSTJ 12/5/2021 21:34'!draws: aCollection	draws := aCollection! !!Bingo methodsFor: 'adding-cards' stamp: 'BSTJ 12/5/2021 21:24'!addCard: aBingoCard	cards add: aBingoCard.! !!Bingo methodsFor: 'initialize-release' stamp: 'BSTJ 12/4/2021 05:39'!initialize	draws := OrderedCollection new.	cards := OrderedCollection new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Bingo class	instanceVariableNames: ''!!Bingo class methodsFor: 'instance creation' stamp: 'BSTJ 12/5/2021 21:54'!fromString: aString	| lines numbersDrawn comma doubleCr cardLines lineIndex newInstance |		newInstance := self new.	comma := $,.	lines := aString lines.	numbersDrawn := lines first subStrings: (Array with:comma).	numbersDrawn := numbersDrawn collect: [:each | each asNumber]. 	newInstance draws: numbersDrawn.		lines := lines allButFirst .	doubleCr := Array with: Character cr with: Character cr.	cardLines := lines reject: [:each | each = ''].	lineIndex := 1.	1 to: cardLines size by: 5 do: [:idx |	| bc | 											bc := BingoCard new.											bc addRow: 1 from: (cardLines at: idx).											bc addRow: 2 from: (cardLines at: idx+1).											bc addRow: 3 from: (cardLines at: idx+2).											bc addRow: 4 from: (cardLines at: idx+3).											bc addRow: 5 from: (cardLines at: idx+4).											newInstance addCard: bc.].																			^newInstance! !Object subclass: #BingoCard	instanceVariableNames: 'card hits'	classVariableNames: ''	poolDictionaries: ''	category: 'AdventOfCode2021'!!BingoCard methodsFor: 'accessing-derived' stamp: 'BSTJ 12/5/2021 23:50'!allUnmarked	| unmarked |		unmarked := OrderedCollection new.	1 to: 5 do: [:eachRow | unmarked addAll: ((self getRow: eachRow) reject: [:num | hits includes: num]) ].	^unmarked! !!BingoCard methodsFor: 'accessing-derived' stamp: 'BSTJ 12/5/2021 22:08'!getColumn: anInteger	| numbers |		1 to: 5 do: [:idx | numbers := card collect: [:rows | (rows at: anInteger)]].	^numbers! !!BingoCard methodsFor: 'accessing-derived' stamp: 'BSTJ 12/5/2021 22:04'!getRow: anInteger	^card at: anInteger! !!BingoCard methodsFor: 'testing' stamp: 'BSTJ 12/5/2021 23:47'!hasBingo	"Horizontal bingo "	1 to: 5 do: [:rowIdx | ((self getRow: rowIdx) allSatisfy: [:each | hits includes: each]) ifTrue: [^true]].		"Vertical bingo"	1 to: 5 do: [:colIdx | ((self getColumn: colIdx) allSatisfy: [:each | hits includes: each]) ifTrue: [^true]].		^false	! !!BingoCard methodsFor: 'testing' stamp: 'BSTJ 12/5/2021 22:01'!isOnCard: aNumber	1 to: 5 do: [:rowIdx | ((card at: rowIdx) anySatisfy: [:each | each = aNumber])							ifTrue: [hits add: aNumber.									^true]].	^false! !!BingoCard methodsFor: 'private' stamp: 'BSTJ 12/5/2021 21:07'!addRow: anInteger from: aStringOfNumbers	| numbers |		numbers := aStringOfNumbers substrings collect: [:each | each asInteger].	card at: anInteger put: numbers.		! !!BingoCard methodsFor: 'initialize-release' stamp: 'BSTJ 12/4/2021 05:30'!initialize	hits := OrderedCollection new.	card := Array new: 5.	card atAllPut: (Array new: 5).! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!BingoCard class	instanceVariableNames: ''!!BingoCard class methodsFor: 'instance creation' stamp: 'BSTJ 12/5/2021 21:05'!fromRows: aCollectionOfLines	|  bc |		bc := BingoCard new.	aCollectionOfLines withIndexDo: [:each :idx | bc addRow: idx from: each].	^bc! !Object subclass: #DepthMeasurement	instanceVariableNames: 'depth windows'	classVariableNames: ''	poolDictionaries: ''	category: 'AdventOfCode2021'!!DepthMeasurement methodsFor: 'accessing' stamp: 'BSTJ 12/2/2021 03:25'!depth	^depth! !!DepthMeasurement methodsFor: 'accessing' stamp: 'BSTJ 12/2/2021 03:25'!depth: anInteger	depth := anInteger.! !!DepthMeasurement methodsFor: 'accessing' stamp: 'BSTJ 12/2/2021 03:25'!windows	^windows! !!DepthMeasurement methodsFor: 'accessing-derived' stamp: 'BSTJ 12/2/2021 04:00'!firstWindow	^windows isEmpty		ifTrue: [nil]		ifFalse: [windows first]! !!DepthMeasurement methodsFor: 'accessing-derived' stamp: 'BSTJ 12/2/2021 05:34'!includesWindow: aString	^windows isEmpty		ifTrue: [false]		ifFalse: [windows includes: aString]! !!DepthMeasurement methodsFor: 'testing' stamp: 'BSTJ 12/2/2021 04:31'!hasOneWindow	^windows size == 1! !!DepthMeasurement methodsFor: 'testing' stamp: 'BSTJ 12/2/2021 04:31'!hasTwoWindow	^windows size == 2! !!DepthMeasurement methodsFor: 'printing' stamp: 'BSTJ 12/2/2021 05:38'!printOn: aStream	aStream		nextPutAll: 'depth: ', self depth printString;cr;		nextPutAll: 'windows: ', self windows printString.! !!DepthMeasurement methodsFor: 'windows-adding' stamp: 'BSTJ 12/2/2021 03:28'!addAllWindows: aCollectionOfWindowString	windows addAll:  aCollectionOfWindowString.! !!DepthMeasurement methodsFor: 'windows-adding' stamp: 'BSTJ 12/2/2021 03:26'!addWindow: aWindowString	windows addLast: aWindowString.! !!DepthMeasurement methodsFor: 'initialize-release' stamp: 'BSTJ 12/2/2021 03:19'!initialize 	super initialize.	windows := OrderedCollection new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DepthMeasurement class	instanceVariableNames: ''!!DepthMeasurement class methodsFor: 'helpers' stamp: 'BSTJ 12/2/2021 04:42'!allWindowsFromMeasurements: aCollectionOfMeasurements	| windows |		windows := OrderedCollection new.	aCollectionOfMeasurements do: [:mea | | found |											found := mea windows detect: [:w | (windows includes: w) not ] ifNone: [nil].											found notNil ifTrue: [windows add: found]].	^windows! !!DepthMeasurement class methodsFor: 'helpers' stamp: 'BSTJ 12/2/2021 05:59'!setSlidingWindowsForMeasurements: aCollectionOfMeasurements	| index  |		"Just to skip the example that ALREADY has the windows set"	aCollectionOfMeasurements first hasOneWindow ifTrue: [^self].		index := 1.	[index <=  aCollectionOfMeasurements size] 		whileTrue: [ | sz idx1 idx2 idx3 |					sz := aCollectionOfMeasurements size.					idx1 := index.					idx2 := index + 1.					idx3 := index + 2.					idx1 <= sz ifTrue: [(aCollectionOfMeasurements at: idx1) addWindow: index].					idx2 <= sz ifTrue: [(aCollectionOfMeasurements at: idx2) addWindow: index].					idx3 <= sz ifTrue: [(aCollectionOfMeasurements at: idx3) addWindow: index].					index := index + 1].! !!DepthMeasurement class methodsFor: 'instance creation' stamp: 'BSTJ 12/2/2021 03:29'!fromString: aString	| newInstance parts |		newInstance := super new.		parts := aString substrings.	newInstance depth: parts first asInteger.	parts := parts allButFirst.	parts notEmpty ifTrue: [newInstance addAllWindows: parts].		^newInstance! !Object subclass: #DiagnosticReport	instanceVariableNames: 'gammaRate epsilonRate entries maxEntryBits'	classVariableNames: ''	poolDictionaries: ''	category: 'AdventOfCode2021'!!DiagnosticReport methodsFor: 'adding' stamp: 'BSTJ 12/3/2021 00:05'!addEntry: anInteger	entries add: anInteger! !!DiagnosticReport methodsFor: 'accessing-derived' stamp: 'BSTJ 12/3/2021 08:12'!getCO2ScrubberRating	| max qualifiers  |		qualifiers := entries.	max := self maxEntryBits.	max to: 1 by: -1 do: [:idx | | bitFilter |								(qualifiers size = 1) ifTrue: [^qualifiers first].								bitFilter := self bitCriterionForCO2At: idx in: qualifiers.								qualifiers := qualifiers select: [:ent | (ent bitAt: idx) = bitFilter]].								^qualifiers first.	! !!DiagnosticReport methodsFor: 'accessing-derived' stamp: 'BSTJ 12/3/2021 08:11'!getOxygenGeneratorRating	| max qualifiers  |		qualifiers := entries.	max := self maxEntryBits.	max to: 1 by: -1 do: [:idx | | bitFilter |								(qualifiers size = 1) ifTrue: [^qualifiers first].								bitFilter := self bitCriterionForOxygenAt: idx in: qualifiers.								qualifiers := qualifiers select: [:ent | (ent bitAt: idx) = bitFilter]].									^qualifiers first.	! !!DiagnosticReport methodsFor: 'accessing-derived' stamp: 'BSTJ 12/3/2021 07:50'!leastCommontBitAtPosition: anInteger in: aCollection		^(self mostCommontBitAtPosition: anInteger in: aCollection) = 0		ifTrue: [1]		ifFalse: [0]! !!DiagnosticReport methodsFor: 'accessing-derived' stamp: 'BSTJ 12/3/2021 07:19'!lifeSupportRating	^self getOxygenGeneratorRating * self getCO2ScrubberRating 	! !!DiagnosticReport methodsFor: 'accessing-derived' stamp: 'BSTJ 12/3/2021 07:49'!mostCommontBitAtPosition: anInteger in: aCollection		^(self numberOfOnesAtPosition: anInteger in: aCollection) > (self numberOfZeroesAtPosition: anInteger in: aCollection)		ifTrue: [1]		ifFalse: [0]! !!DiagnosticReport methodsFor: 'accessing-derived' stamp: 'BSTJ 12/3/2021 07:42'!numberOfOnesAtPosition: anInteger in: aCollection		^aCollection count: [:int | (int bitAt: anInteger) = 1].! !!DiagnosticReport methodsFor: 'accessing-derived' stamp: 'BSTJ 12/3/2021 07:42'!numberOfZeroesAtPosition: anInteger in: aCollection		^aCollection count: [:int | (int bitAt: anInteger) = 0].! !!DiagnosticReport methodsFor: 'accessing-derived' stamp: 'BSTJ 12/3/2021 00:35'!powerConsumption	^self getEpsilonRate * self getGammaRate! !!DiagnosticReport methodsFor: 'bit-criteria' stamp: 'BSTJ 12/3/2021 08:01'!bitCriterionForCO2At: anInteger in: aCollection	| ones zeroes |		ones := self numberOfOnesAtPosition: anInteger in: aCollection.	zeroes := self numberOfZeroesAtPosition: anInteger in: aCollection.	^(zeroes <= ones)		ifTrue: [0]		ifFalse: [1]! !!DiagnosticReport methodsFor: 'bit-criteria' stamp: 'BSTJ 12/3/2021 07:48'!bitCriterionForOxygenAt: anInteger in: aCollection	| ones zeroes |		ones := self numberOfOnesAtPosition: anInteger in: aCollection.	zeroes := self numberOfZeroesAtPosition: anInteger in: aCollection.	^(ones >= zeroes)		ifTrue: [1]		ifFalse: [0]! !!DiagnosticReport methodsFor: 'accessing-rates' stamp: 'BSTJ 12/3/2021 08:11'!getEpsilonRate	| bitString max |		max := self maxEntryBits .	bitString := ''.	1 to: max do: [:idx | 	| bit |						bit := self leastCommontBitAtPosition: idx in: entries.						bitString := (bit asString), bitString ].	^Integer readFrom: bitString base: 2! !!DiagnosticReport methodsFor: 'accessing-rates' stamp: 'BSTJ 12/3/2021 08:11'!getGammaRate	| bitString max |		max := self maxEntryBits .	bitString := ''.	max to: 1 by: -1 do: [:idx | | bit |							bit := self mostCommontBitAtPosition: idx in: entries.							bitString := bitString, (bit asString) ].	^Integer readFrom: bitString base: 2! !!DiagnosticReport methodsFor: 'initialize-release' stamp: 'BSTJ 12/3/2021 01:02'!initialize	gammaRate := 0.	epsilonRate := 0.	entries := OrderedCollection new.	maxEntryBits := 0.! !!DiagnosticReport methodsFor: 'accessing' stamp: 'BSTJ 12/3/2021 00:03'!entries: anObject	entries := anObject! !!DiagnosticReport methodsFor: 'accessing' stamp: 'BSTJ 12/3/2021 00:03'!epsilonRate	^ epsilonRate! !!DiagnosticReport methodsFor: 'accessing' stamp: 'BSTJ 12/3/2021 00:03'!gammaRate	^ gammaRate! !!DiagnosticReport methodsFor: 'accessing' stamp: 'BSTJ 12/3/2021 01:00'!maxEntryBits	^ maxEntryBits! !!DiagnosticReport methodsFor: 'accessing' stamp: 'BSTJ 12/3/2021 01:00'!maxEntryBits: anObject	maxEntryBits := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DiagnosticReport class	instanceVariableNames: ''!!DiagnosticReport class methodsFor: 'as yet unclassified' stamp: 'BSTJ 12/3/2021 01:02'!fromString: aString	| report maxStringSize |		maxStringSize := 0.	report := super new.	aString linesDo: [ :each |	(each size > maxStringSize) ifTrue: [maxStringSize := each size]. 								report addEntry: (Integer readFrom: each base: 2)].	report maxEntryBits: maxStringSize.	^report! !Object subclass: #HydrothermalGrid	instanceVariableNames: 'grid lines'	classVariableNames: ''	poolDictionaries: ''	category: 'AdventOfCode2021'!!HydrothermalGrid methodsFor: 'accessing-derived' stamp: 'BSTJ 12/6/2021 01:11'!atX: xInteger atY:  yInteger put: aValue	| coordinate |		coordinate := xInteger@yInteger.	grid at: coordinate put: aValue	! !!HydrothermalGrid methodsFor: 'accessing-derived' stamp: 'BSTJ 12/6/2021 01:14'!incrementValueAt: aPoint	| value |		value := grid at: aPoint ifAbsent: [nil].	value isNil		ifTrue: [grid at: aPoint put: 1]		ifFalse: [grid at: aPoint put: (value + 1)]	! !!HydrothermalGrid methodsFor: 'adding' stamp: 'BSTJ 12/6/2021 01:17'!addLine: aVentLine	lines add: aVentLine! !!HydrothermalGrid methodsFor: 'accessing-candidates' stamp: 'BSTJ 12/6/2021 03:53'!allCandidates	"Only calculate horizontal and vertical lines"		^lines! !!HydrothermalGrid methodsFor: 'accessing-candidates' stamp: 'BSTJ 12/6/2021 02:04'!simpleCandidates	"Only calculate horizontal and vertical lines"		^lines select: [:each | each isVerticalLine or: [each isHorizontalLine ]] ! !!HydrothermalGrid methodsFor: 'calculating-overlaps' stamp: 'BSTJ 12/6/2021 02:13'!calculateOverlaps	lines do: [:eachLine | eachLine coordinatesDo: [:coor | self incrementValueAt: coor]].! !!HydrothermalGrid methodsFor: 'calculating-overlaps' stamp: 'BSTJ 12/6/2021 02:04'!calculateSimpleOverlaps	self simpleCandidates do: [:eachLine | eachLine coordinatesDo: [:coor | self incrementValueAt: coor]].! !!HydrothermalGrid methodsFor: 'calculating-overlaps' stamp: 'BSTJ 12/6/2021 03:40'!getNumberOfOverlapsGreaterThan: anInteger		^(self getOverlapsGreaterThan: anInteger) size! !!HydrothermalGrid methodsFor: 'calculating-overlaps' stamp: 'BSTJ 12/6/2021 03:32'!getOverlapsGreaterThan: anInteger	| hits |		hits := OrderedCollection new.	grid keysAndValuesDo: [:coor :overlaps |(overlaps > anInteger) ifTrue:[hits add: (Array with: coor with: overlaps)]].	^hits! !!HydrothermalGrid methodsFor: 'initialize-release' stamp: 'BSTJ 12/6/2021 01:16'!initialize	grid := Dictionary new.	lines := OrderedCollection new.		! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!HydrothermalGrid class	instanceVariableNames: ''!!HydrothermalGrid class methodsFor: 'as yet unclassified' stamp: 'BSTJ 12/6/2021 01:23'!fromString: aString	| lines newInstance  |		newInstance := self new.	lines := aString subStrings: (Array with: Character cr).	lines do: [:eachLine | newInstance addLine: (VentLine fromString: eachLine)].	^newInstance	! !Object subclass: #Lanternfish	instanceVariableNames: 'internalTimer'	classVariableNames: ''	poolDictionaries: ''	category: 'AdventOfCode2021'!!Lanternfish methodsFor: 'printing' stamp: 'BSTJ 12/7/2021 19:37'!printOn: aStream	super printOn: aStream.	aStream nextPutAll: ' (', internalTimer printString, ')'.! !!Lanternfish methodsFor: 'initialize-release' stamp: 'BSTJ 12/6/2021 21:54'!initialize	internalTimer := 8.! !!Lanternfish methodsFor: 'as yet unclassified' stamp: 'BSTJ 12/6/2021 22:02'!decrementTimer	(internalTimer = 0)		ifTrue: [internalTimer := 6]		ifFalse: [internalTimer := internalTimer - 1].	! !!Lanternfish methodsFor: 'as yet unclassified' stamp: 'BSTJ 12/7/2021 20:41'!deliver	^self class new	! !!Lanternfish methodsFor: 'as yet unclassified' stamp: 'BSTJ 12/6/2021 21:59'!isAboutToGiveBirth	^internalTimer = 0	! !!Lanternfish methodsFor: 'as yet unclassified' stamp: 'BSTJ 12/6/2021 21:51'!setTimer: anInteger	internalTimer := anInteger	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Lanternfish class	instanceVariableNames: ''!!Lanternfish class methodsFor: 'instance creation' stamp: 'BSTJ 12/6/2021 21:53'!withTimer: anInteger	^(self new)		setTimer: anInteger! !BasicSubmarine subclass: #Submarine	instanceVariableNames: 'aim'	classVariableNames: ''	poolDictionaries: ''	category: 'AdventOfCode2021'!!Submarine methodsFor: 'moving' stamp: 'BSTJ 12/2/2021 02:54'!move: aDirection by: anInteger	(aDirection == #forward) 		ifTrue: [horizontalPosition := horizontalPosition + anInteger.				depth := depth + (aim * anInteger)].			(aDirection == #up) 		ifTrue: [	aim := aim - anInteger].			(aDirection == #down) 		ifTrue: [	aim := aim + anInteger].				! !!Submarine methodsFor: 'initialize-release' stamp: 'BSTJ 12/2/2021 02:47'!initialize 	super initialize.	aim := 0.! !!Submarine methodsFor: 'accessing' stamp: 'BSTJ 12/2/2021 02:45'!aim	^ aim! !Object subclass: #VentLine	instanceVariableNames: 'start end'	classVariableNames: ''	poolDictionaries: ''	category: 'AdventOfCode2021'!!VentLine methodsFor: 'enumerating' stamp: 'BSTJ 12/6/2021 03:49'!coordinatesDo: aBlock	| xc |	self isHorizontalLine 		ifTrue: [(start x < end x)					ifTrue: [start x to: end x do: [:xCoord | aBlock value: (xCoord@(start y))]]					ifFalse: [end x to: start x do: [:xCoord | aBlock value: (xCoord@(start y))]]].					self isVerticalLine 		ifTrue: [(start y < end y)					ifTrue: [start y to: end y do: [:yCoord | aBlock value: ((start x)@yCoord)]]					ifFalse: [end y to: start y do: [:yCoord | aBlock value: ((start x)@yCoord)]]].					self isDiagonalLine 		ifTrue: [	| m b params |								params := self getMAndB.				m := params first.				b := params last.								(start x) < (end x)					ifTrue: [	xc := Interval from: start x to: end x]					ifFalse: [xc := Interval from: start x to: end x by: -1 ].								xc do: [:x | | y |							y := (m * x) + b.							aBlock value: (x@y)]].! !!VentLine methodsFor: 'private' stamp: 'BSTJ 12/6/2021 02:26'!getB	^start y - (self getM * start x)	! !!VentLine methodsFor: 'private' stamp: 'BSTJ 12/6/2021 02:25'!getM	^(start y - end y)/(start x - end x)! !!VentLine methodsFor: 'private' stamp: 'BSTJ 12/6/2021 02:31'!getMAndB	| m b |		m := (start y - end y)/(start x - end x).	b := start y - (m * start x).	^Array with: m with: b.! !!VentLine methodsFor: 'testing' stamp: 'BSTJ 12/6/2021 01:02'!isDiagonalLine	^self isHorizontalLine		ifTrue: [false]		ifFalse: [self isVerticalLine					ifTrue: [false]					ifFalse: [true]] ! !!VentLine methodsFor: 'testing' stamp: 'BSTJ 12/6/2021 01:00'!isHorizontalLine	^start y = end y! !!VentLine methodsFor: 'testing' stamp: 'BSTJ 12/6/2021 01:01'!isVerticalLine	^start x = end x! !!VentLine methodsFor: 'accessing' stamp: 'BSTJ 12/6/2021 00:42'!end	^ end! !!VentLine methodsFor: 'accessing' stamp: 'BSTJ 12/6/2021 00:42'!end: anObject	end := anObject! !!VentLine methodsFor: 'accessing' stamp: 'BSTJ 12/6/2021 00:42'!start	^ start! !!VentLine methodsFor: 'accessing' stamp: 'BSTJ 12/6/2021 00:42'!start: anObject	start := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!VentLine class	instanceVariableNames: ''!!VentLine class methodsFor: 'as yet unclassified' stamp: 'BSTJ 12/6/2021 00:53'!fromString: aString	| startString endString vectorString newInstance startPoint endPoint |		newInstance := super new.	vectorString := aString substrings.	startString := (vectorString at: 1) subStrings: #($,).	endString := (vectorString at: 3) subStrings: #($,).	startPoint := ((startString first) asInteger)@((startString last) asInteger).	endPoint := ((endString first) asInteger)@((endString last) asInteger).	newInstance start: startPoint.	newInstance end: endPoint.	^newInstance			! !